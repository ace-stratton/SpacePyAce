
# python wrapper for package gitlab.endurosatlab.com/ground_station/go-comms/cmd/pygs within overall package pygs
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy.exe build -build-tags=dbg_log with_wire_only -no-make -output=art\spacepy-windows-amd64 .\pygs ..\pkg\gs ..\pkg\consts ..\pkg\misc ..\internal\event_notifier

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _pygs
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from pygs import pygs
# and then refer to everything using pygs. prefix
# packages imported by this package listed below:

from . import gs



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct pygs.PyNotify
class PyNotify(go.GoClass):
	"""Python notify callback function.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pygs.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pygs.IncRef(self.handle)
		else:
			self.handle = _pygs.pygs_PyNotify_CTor()
			_pygs.IncRef(self.handle)
	def __del__(self):
		_pygs.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'pygs.PyNotify{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'pygs.PyNotify ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def CallBack(self, fun, goRun=False):
		"""CallBack(callable fun) 
		
		Set the callback function.
		"""
		_pygs.pygs_PyNotify_CallBack(self.handle, fun, goRun)

# Python type for struct pygs.PyDataNotify
class PyDataNotify(go.GoClass):
	"""Python notify callback function with data.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pygs.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pygs.IncRef(self.handle)
		else:
			self.handle = _pygs.pygs_PyDataNotify_CTor()
			_pygs.IncRef(self.handle)
			if  0 < len(args):
				self.Data = args[0]
			if "Data" in kwargs:
				self.Data = kwargs["Data"]
	def __del__(self):
		_pygs.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'pygs.PyDataNotify{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'pygs.PyDataNotify ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Data(self):
		return gs.DataResult(handle=_pygs.pygs_PyDataNotify_Data_Get(self.handle))
	@Data.setter
	def Data(self, value):
		if isinstance(value, go.GoClass):
			_pygs.pygs_PyDataNotify_Data_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def CallBack(self, fun, goRun=False):
		"""CallBack(callable fun) 
		
		Set the callback function with data.
		"""
		_pygs.pygs_PyDataNotify_CallBack(self.handle, fun, goRun)

# Python type for struct pygs.PyFrameNotify
class PyFrameNotify(go.GoClass):
	"""Python notify callback function with frame data.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pygs.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pygs.IncRef(self.handle)
		else:
			self.handle = _pygs.pygs_PyFrameNotify_CTor()
			_pygs.IncRef(self.handle)
			if  0 < len(args):
				self.Frame = args[0]
			if "Frame" in kwargs:
				self.Frame = kwargs["Frame"]
	def __del__(self):
		_pygs.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'pygs.PyFrameNotify{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'pygs.PyFrameNotify ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Frame(self):
		return gs.FrameResult(handle=_pygs.pygs_PyFrameNotify_Frame_Get(self.handle))
	@Frame.setter
	def Frame(self, value):
		if isinstance(value, go.GoClass):
			_pygs.pygs_PyFrameNotify_Frame_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def CallBack(self, fun, goRun=False):
		"""CallBack(callable fun) 
		
		Set the callback function with frame data.
		"""
		_pygs.pygs_PyFrameNotify_CallBack(self.handle, fun, goRun)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def PyToGsFrameNotify(pyNotify):
	"""PyToGsFrameNotify(object pyNotify) object
	
	Convert Python notify callback function with frame data to GS notify callback function with frame data.
	"""
	return gs.FrameNotify(handle=_pygs.pygs_PyToGsFrameNotify(pyNotify.handle))
def PyToGsNotify(pyNotify):
	"""PyToGsNotify(object pyNotify) object
	
	Convert Python notify callback function to GS notify callback function.
	"""
	return gs.Notify(handle=_pygs.pygs_PyToGsNotify(pyNotify.handle))
def Verbose(enable, goRun=False):
	"""Verbose(bool enable) 
	
	Enable verbose logging
	"""
	_pygs.pygs_Verbose(enable, goRun)
def PyToGsDataNotify(pyNotify):
	"""PyToGsDataNotify(object pyNotify) object
	
	Convert Python notify callback function with data to GS notify callback function with data.
	"""
	return gs.DataNotify(handle=_pygs.pygs_PyToGsDataNotify(pyNotify.handle))


