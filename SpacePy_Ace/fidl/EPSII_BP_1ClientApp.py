# ********************************************************************************************
# * @file EPSII_BP_1ClientApp.py
# * @brief MAC FP client Python implementation generator
# ********************************************************************************************
# * @version           interface EPSII_BP_1 v1.0
# *
# * @copyright         (C) Copyright EnduroSat
# *
# *                    Contents and presentations are protected world-wide.
# *                    Any kind of using, copying etc. is prohibited without prior permission.
# *                    All rights - incl. industrial property rights - are reserved.
# *
# *-------------------------------------------------------------------------------------------
# * GENERATOR: org.endurosat.generators.macchiato.binders.Gen_Py v1.9
# *-------------------------------------------------------------------------------------------
# * !!! Please note that this code is fully GENERATED and shall not be manually modified as
# * all changes will be overwritten !!!
# ********************************************************************************************

import re
import binascii
from struct import *
from SerDesHelpers import *

class FP_API_EPSII_BP_1:
    def __init__(self, rawSerDesSupport : bool = False):
        self.const_EPSII_BP_1_PROTOCOL_ID = 21
        self.rawSerDesSupport = rawSerDesSupport
        self.versionMajor=1
        self.versionMinor=0


        #
        # Response parsers map
        #
        self.responseParsersDict = {}
        self.responseParsersDict[1] = self.resp_GetDeviceInfo
        self.responseParsersDict[2] = self.resp_GetRAWSensors
        self.responseParsersDict[3] = self.resp_GetBatteryInfo
        self.responseParsersDict[4] = self.resp_GetDeviceHealthInfo
        self.responseParsersDict[5] = self.resp_SetBatHeaterSettings
        self.responseParsersDict[6] = self.resp_GetBatHeaterSettings
        self.responseParsersDict[7] = self.resp_SetBasicSettings
        self.responseParsersDict[8] = self.resp_GetBasicSettings

    class enum_ESEPSII_BP_ReservedValues:
        ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_MAX_VAL = 2147483632
        ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_UNKNOWN_VAL = 2147483647
        ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_ERROR_VAL = 2147483646
    
        ValuesDict = {
            ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_MAX_VAL : 'ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_MAX_VAL', 
            ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_UNKNOWN_VAL : 'ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_UNKNOWN_VAL', 
            ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_ERROR_VAL : 'ESEPSII_BP_RESERVEDVALUES_ESEPSIISSVBP_ERROR_VAL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_ESEPSII_BP_ReservedValues()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_ESEPSII_BP_ReservedValues.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_ESEPSII_BP_ReservedValues.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 4
    
    class enum_ESEPSII_BP_SensorIDs:
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_NULL_ID = 0
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_I_ID = 1
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_U_ID = 2
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_P_ID = 3
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_T_ID = 4
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_I_ID = 5
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_U_ID = 6
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_P_ID = 7
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_T_ID = 8
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_U_ID = 9
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_I_ID = 10
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_P_ID = 11
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_1_U_ID = 12
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_2_U_ID = 13
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_3_U_ID = 14
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_4_U_ID = 15
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_5_U_ID = 16
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_6_U_ID = 17
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_7_U_ID = 18
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_8_U_ID = 19
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_SUM_CELL_U_ID = 20
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_INT_TEMP_ID = 21
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_U_ID = 22
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_I_ID = 23
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_P_ID = 24
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_1_U_ID = 25
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_2_U_ID = 26
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_3_U_ID = 27
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_4_U_ID = 28
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_5_U_ID = 29
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_6_U_ID = 30
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_7_U_ID = 31
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_8_U_ID = 32
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_SUM_CELL_U_ID = 33
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_INT_TEMP_ID = 34
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_CHARGER_ID = 35
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_SYSTEM_ID = 36
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_SUPPLY_ID = 37
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_CHRG_FAULTS_ID = 38
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_TBAT_ID = 39
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_POUT_ID = 40
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_PIN_ID = 41
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_EFF_ID = 42
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_IOUT_ID = 43
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_IIN_ID = 44
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VBAT_ID = 45
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VIN_ID = 46
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VINR_ID = 47
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_CHARGER_ID = 48
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_SYSTEM_ID = 49
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_SUPPLY_ID = 50
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_CHRG_FAULTS_ID = 51
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_TBAT_ID = 52
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_POUT_ID = 53
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_PIN_ID = 54
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_EFF_ID = 55
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_IOUT_ID = 56
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_IIN_ID = 57
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VBAT_ID = 58
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VIN_ID = 59
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VINR_ID = 60
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_CHARGER_ID = 61
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_SYSTEM_ID = 62
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_SUPPLY_ID = 63
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_CHRG_FAULTS_ID = 64
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_TBAT_ID = 65
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_POUT_ID = 66
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_PIN_ID = 67
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_EFF_ID = 68
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_IOUT_ID = 69
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_IIN_ID = 70
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VBAT_ID = 71
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VIN_ID = 72
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VINR_ID = 73
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_EMDRV_CHIPSTATE_ID = 74
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_CHARGER_ID = 75
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_SYSTEM_ID = 76
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_SUPPLY_ID = 77
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_CHRG_FAULTS_ID = 78
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_TBAT_ID = 79
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_POUT_ID = 80
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_PIN_ID = 81
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_EFF_ID = 82
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_IOUT_ID = 83
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_IIN_ID = 84
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VBAT_ID = 85
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VIN_ID = 86
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VINR_ID = 87
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_EMDRV_CHIPSTATE_ID = 88
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_CHARGER_ID = 89
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_SYSTEM_ID = 90
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_SUPPLY_ID = 91
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_CHRG_FAULTS_ID = 92
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_TBAT_ID = 93
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_POUT_ID = 94
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_PIN_ID = 95
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_EFF_ID = 96
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_IOUT_ID = 97
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_IIN_ID = 98
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VBAT_ID = 99
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VIN_ID = 100
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VINR_ID = 101
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_EMDRV_CHIPSTATE_ID = 102
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_CHARGER_ID = 103
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_SYSTEM_ID = 104
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_SUPPLY_ID = 105
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_CHRG_FAULTS_ID = 106
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_TBAT_ID = 107
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_POUT_ID = 108
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_PIN_ID = 109
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_EFF_ID = 110
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_IOUT_ID = 111
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_IIN_ID = 112
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VBAT_ID = 113
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VIN_ID = 114
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VINR_ID = 115
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BP_TEMPERATURE_PCB_1_ID = 116
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BP_TEMPERATURE_PCB_2_ID = 117
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_CPU_T_ID = 118
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_CPU_AVCC_U_ID = 119
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_BAT_TEMP_NTC1_ID = 120
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_BAT_TEMP_NTC2_ID = 121
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_RAD_FED_ID = 122
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_HEATER_PWM_PERCENT_ID = 123
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_HEATER_TARGET_TEMP_ID = 124
        ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BAT_CHARGE_WH_ID = 125
    
        ValuesDict = {
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_NULL_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_NULL_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_I_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_I_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_P_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_P_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_T_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_1_T_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_I_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_I_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_P_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_P_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_T_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_INA_BAT_OUT_2_T_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_I_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_I_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_P_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_P_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_1_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_1_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_2_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_2_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_3_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_3_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_4_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_4_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_5_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_5_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_6_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_6_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_7_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_7_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_8_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_CELL_8_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_SUM_CELL_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_BAT_SUM_CELL_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_INT_TEMP_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER1_INT_TEMP_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_I_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_I_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_P_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_P_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_1_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_1_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_2_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_2_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_3_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_3_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_4_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_4_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_5_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_5_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_6_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_6_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_7_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_7_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_8_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_CELL_8_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_SUM_CELL_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_BAT_SUM_CELL_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_INT_TEMP_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BALANCER2_INT_TEMP_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_CHARGER_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_CHARGER_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_SYSTEM_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_SYSTEM_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_SUPPLY_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_SUPPLY_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_CHRG_FAULTS_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_STAT_CHRG_FAULTS_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_TBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_TBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_POUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_POUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_PIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_PIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_EFF_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_EFF_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_IOUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_IOUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_IIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_IIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VINR_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XP_TELE_VINR_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_CHARGER_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_CHARGER_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_SYSTEM_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_SYSTEM_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_SUPPLY_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_SUPPLY_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_CHRG_FAULTS_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_STAT_CHRG_FAULTS_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_TBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_TBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_POUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_POUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_PIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_PIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_EFF_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_EFF_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_IOUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_IOUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_IIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_IIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VINR_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_XR_TELE_VINR_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_CHARGER_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_CHARGER_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_SYSTEM_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_SYSTEM_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_SUPPLY_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_SUPPLY_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_CHRG_FAULTS_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_STAT_CHRG_FAULTS_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_TBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_TBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_POUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_POUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_PIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_PIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_EFF_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_EFF_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_IOUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_IOUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_IIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_IIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VINR_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YP_TELE_VINR_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_EMDRV_CHIPSTATE_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_EMDRV_CHIPSTATE_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_CHARGER_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_CHARGER_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_SYSTEM_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_SYSTEM_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_SUPPLY_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_SUPPLY_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_CHRG_FAULTS_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_STAT_CHRG_FAULTS_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_TBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_TBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_POUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_POUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_PIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_PIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_EFF_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_EFF_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_IOUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_IOUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_IIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_IIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VINR_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_YR_TELE_VINR_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_EMDRV_CHIPSTATE_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_EMDRV_CHIPSTATE_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_CHARGER_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_CHARGER_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_SYSTEM_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_SYSTEM_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_SUPPLY_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_SUPPLY_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_CHRG_FAULTS_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_STAT_CHRG_FAULTS_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_TBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_TBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_POUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_POUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_PIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_PIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_EFF_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_EFF_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_IOUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_IOUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_IIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_IIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VINR_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZP_TELE_VINR_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_EMDRV_CHIPSTATE_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_EMDRV_CHIPSTATE_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_CHARGER_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_CHARGER_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_SYSTEM_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_SYSTEM_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_SUPPLY_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_SUPPLY_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_CHRG_FAULTS_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_STAT_CHRG_FAULTS_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_TBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_TBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_POUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_POUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_PIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_PIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_EFF_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_EFF_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_IOUT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_IOUT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_IIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_IIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VBAT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VBAT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VIN_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VIN_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VINR_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_CHRG_ZR_TELE_VINR_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BP_TEMPERATURE_PCB_1_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BP_TEMPERATURE_PCB_1_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BP_TEMPERATURE_PCB_2_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BP_TEMPERATURE_PCB_2_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_CPU_T_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_CPU_T_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_CPU_AVCC_U_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_CPU_AVCC_U_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_BAT_TEMP_NTC1_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_BAT_TEMP_NTC1_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_BAT_TEMP_NTC2_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_BAT_TEMP_NTC2_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_RAD_FED_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_ADC_RAD_FED_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_HEATER_PWM_PERCENT_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_HEATER_PWM_PERCENT_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_HEATER_TARGET_TEMP_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_HEATER_TARGET_TEMP_ID', 
            ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BAT_CHARGE_WH_ID : 'ESEPSII_BP_SENSORIDS_ESEPSIISSVPDM_BAT_CHARGE_WH_ID'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_ESEPSII_BP_SensorIDs()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_ESEPSII_BP_SensorIDs.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_ESEPSII_BP_SensorIDs.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 2
    
    class enum_ESDI_FirmwareType:
        ESDI_FIRMWARETYPE_ESDIFT_PRODUCTION = 0
        ESDI_FIRMWARETYPE_ESDIFT_FAILSAFE = 1
    
        ValuesDict = {
            ESDI_FIRMWARETYPE_ESDIFT_PRODUCTION : 'ESDI_FIRMWARETYPE_ESDIFT_PRODUCTION', 
            ESDI_FIRMWARETYPE_ESDIFT_FAILSAFE : 'ESDI_FIRMWARETYPE_ESDIFT_FAILSAFE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_ESDI_FirmwareType()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_ESDI_FirmwareType.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_ESDI_FirmwareType.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_EDHI_ChipStatus:
        EDHI_CHIPSTATUS_EDHICS_EMDCS_UNKNOWN = 0
        EDHI_CHIPSTATUS_EDHICS_EMDCS_ONLINE = 1
        EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_ERR = 2
        EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_TIMEOUT = 3
        EDHI_CHIPSTATUS_EDHICS_EMDCS_DRV_DISABLED = 4
    
        ValuesDict = {
            EDHI_CHIPSTATUS_EDHICS_EMDCS_UNKNOWN : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_UNKNOWN', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_ONLINE : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_ONLINE', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_ERR : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_ERR', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_TIMEOUT : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_TIMEOUT', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_DRV_DISABLED : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_DRV_DISABLED'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_SBH_EnableBitmask:
        SBH_ENABLEBITMASK_SBHEB_ALL_MODES_DISABLE = 0
        SBH_ENABLEBITMASK_SBHEB_NORMAL_MODE_ONLY = 1
        SBH_ENABLEBITMASK_SBHEB_PHENIX_MODE_ONLY = 2
        SBH_ENABLEBITMASK_SBHEB_PHENIX_AND_NORMAL = 3
    
        ValuesDict = {
            SBH_ENABLEBITMASK_SBHEB_ALL_MODES_DISABLE : 'SBH_ENABLEBITMASK_SBHEB_ALL_MODES_DISABLE', 
            SBH_ENABLEBITMASK_SBHEB_NORMAL_MODE_ONLY : 'SBH_ENABLEBITMASK_SBHEB_NORMAL_MODE_ONLY', 
            SBH_ENABLEBITMASK_SBHEB_PHENIX_MODE_ONLY : 'SBH_ENABLEBITMASK_SBHEB_PHENIX_MODE_ONLY', 
            SBH_ENABLEBITMASK_SBHEB_PHENIX_AND_NORMAL : 'SBH_ENABLEBITMASK_SBHEB_PHENIX_AND_NORMAL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBH_EnableBitmask()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBH_EnableBitmask.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBH_EnableBitmask.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_SBH_SetError:
        SBH_SETERROR_SBHSE_SUCCESS = 0
        SBH_SETERROR_SBHSE_BAD_PARAMS = 1
        SBH_SETERROR_SBHSE_NVM_ERR = 2
    
        ValuesDict = {
            SBH_SETERROR_SBHSE_SUCCESS : 'SBH_SETERROR_SBHSE_SUCCESS', 
            SBH_SETERROR_SBHSE_BAD_PARAMS : 'SBH_SETERROR_SBHSE_BAD_PARAMS', 
            SBH_SETERROR_SBHSE_NVM_ERR : 'SBH_SETERROR_SBHSE_NVM_ERR'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBH_SetError()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBH_SetError.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBH_SetError.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_SBS_ConOpsSetting:
        def __init__(self, int64__EnterThreshold = 0, int64__ExitThreshold = 0, uint64__ModulesMask = 0):
            self.int64__EnterThreshold = int64__EnterThreshold
            self.int64__ExitThreshold = int64__ExitThreshold
            self.uint64__ModulesMask = uint64__ModulesMask
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("int64", self.int64__EnterThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("int64", self.int64__ExitThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint64", self.uint64__ModulesMask)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.struct_SBS_ConOpsSetting()
    
            currentPos = pos
            
            (resultInstance.int64__EnterThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int64__ExitThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint64__ModulesMask, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint64", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 24
    
    class enum_EConOpsRegMode:
        ECONOPSREGMODE_NO_CON_OPS = 0
        ECONOPSREGMODE_BY_VOLTAGE = 1
    
        ValuesDict = {
            ECONOPSREGMODE_NO_CON_OPS : 'ECONOPSREGMODE_NO_CON_OPS', 
            ECONOPSREGMODE_BY_VOLTAGE : 'ECONOPSREGMODE_BY_VOLTAGE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_EConOpsRegMode()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_EConOpsRegMode.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_EConOpsRegMode.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_EBatTypeAndConfig:
        EBATTYPEANDCONFIG_UNKNOWN = 0
        EBATTYPEANDCONFIG_US18650VTC6_2X4 = 1
    
        ValuesDict = {
            EBATTYPEANDCONFIG_UNKNOWN : 'EBATTYPEANDCONFIG_UNKNOWN', 
            EBATTYPEANDCONFIG_US18650VTC6_2X4 : 'EBATTYPEANDCONFIG_US18650VTC6_2X4'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_EBatTypeAndConfig()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_EBatTypeAndConfig.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_EBatTypeAndConfig.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_SBasicSettings:
        def __init__(self, e__EBatTypeAndConfig__BatTypeAndConfig = 0, e__EConOpsRegMode__ConOpsRegMode = 0, uint16__ConOpsBroadcastInterval = 0, uint64__ConOpsSafeModeModulesMask = 0, s__ConOpsPhenixModeSettings = None, s__ConOpsBatOvhModeSettings = None, s__ConOpsHellModeSettings = None):
            self.e__EBatTypeAndConfig__BatTypeAndConfig = e__EBatTypeAndConfig__BatTypeAndConfig
            self.e__EConOpsRegMode__ConOpsRegMode = e__EConOpsRegMode__ConOpsRegMode
            self.uint16__ConOpsBroadcastInterval = uint16__ConOpsBroadcastInterval
            self.uint64__ConOpsSafeModeModulesMask = uint64__ConOpsSafeModeModulesMask
            self.s__ConOpsPhenixModeSettings = s__ConOpsPhenixModeSettings
            self.s__ConOpsBatOvhModeSettings = s__ConOpsBatOvhModeSettings
            self.s__ConOpsHellModeSettings = s__ConOpsHellModeSettings
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_EPSII_BP_1.enum_EBatTypeAndConfig(self.e__EBatTypeAndConfig__BatTypeAndConfig).serialize()
            
            result += FP_API_EPSII_BP_1.enum_EConOpsRegMode(self.e__EConOpsRegMode__ConOpsRegMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ConOpsBroadcastInterval)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint64", self.uint64__ConOpsSafeModeModulesMask)
            
            result += self.s__ConOpsPhenixModeSettings.serialize()
            
            result += self.s__ConOpsBatOvhModeSettings.serialize()
            
            result += self.s__ConOpsHellModeSettings.serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.struct_SBasicSettings()
    
            currentPos = pos
            
            (resultInstance.e__EBatTypeAndConfig__BatTypeAndConfig, bytesProcessed) = FP_API_EPSII_BP_1.enum_EBatTypeAndConfig.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__EConOpsRegMode__ConOpsRegMode, bytesProcessed) = FP_API_EPSII_BP_1.enum_EConOpsRegMode.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ConOpsBroadcastInterval, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint64__ConOpsSafeModeModulesMask, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint64", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.s__ConOpsPhenixModeSettings, bytesProcessed) = FP_API_EPSII_BP_1.struct_SBS_ConOpsSetting.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.s__ConOpsBatOvhModeSettings, bytesProcessed) = FP_API_EPSII_BP_1.struct_SBS_ConOpsSetting.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.s__ConOpsHellModeSettings, bytesProcessed) = FP_API_EPSII_BP_1.struct_SBS_ConOpsSetting.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 84
    
    class enum_SBS_SetError:
        SBS_SETERROR_SBSSE_SUCCESS = 0
        SBS_SETERROR_SBSSE_NVM_ERR = 1
        SBS_SETERROR_SBSSE_BAD_PARAMS = 2
        SBS_SETERROR_SBSSE_REG_TYPE_NOT_SUPP = 3
    
        ValuesDict = {
            SBS_SETERROR_SBSSE_SUCCESS : 'SBS_SETERROR_SBSSE_SUCCESS', 
            SBS_SETERROR_SBSSE_NVM_ERR : 'SBS_SETERROR_SBSSE_NVM_ERR', 
            SBS_SETERROR_SBSSE_BAD_PARAMS : 'SBS_SETERROR_SBSSE_BAD_PARAMS', 
            SBS_SETERROR_SBSSE_REG_TYPE_NOT_SUPP : 'SBS_SETERROR_SBSSE_REG_TYPE_NOT_SUPP'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBS_SetError()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBS_SetError.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBS_SetError.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_SBS_GetError:
        SBS_GETERROR_SBSGE_SUCCESS = 0
        SBS_GETERROR_SBSGE_NVM_ERR = 1
        SBS_GETERROR_SBSGE_CONFIG_NOT_SET = 2
    
        ValuesDict = {
            SBS_GETERROR_SBSGE_SUCCESS : 'SBS_GETERROR_SBSGE_SUCCESS', 
            SBS_GETERROR_SBSGE_NVM_ERR : 'SBS_GETERROR_SBSGE_NVM_ERR', 
            SBS_GETERROR_SBSGE_CONFIG_NOT_SET : 'SBS_GETERROR_SBSGE_CONFIG_NOT_SET'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBS_GetError()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBS_GetError.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBS_GetError.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    

    ############################################################################################################
    """
    Request function for FIDL method: GetDeviceInfo
        - function ID: 00000001
        - description: Get basic device information: device type, serial number, current operational mode, software version, etc.
    """
    def req_GetDeviceInfo(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000001
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000001, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetDeviceInfo
        - function ID: 00000001
        - description: Get basic device information: device type, serial number, current operational mode, software version, etc.
    """
    def resp_GetDeviceInfo(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000001):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__ModuleTypeID"] = field
        currentPos += bytesProcessed
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__string__ModuleTypeSize"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_string.deserialize(data, currentPos, 20)
        responseInstance["string__ModuleType"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__ModuleHWVersion"] = field
        currentPos += bytesProcessed
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__string__DeviceSerialNumberSize"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_string.deserialize(data, currentPos, 30)
        responseInstance["string__DeviceSerialNumber"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_ESDI_FirmwareType.deserialize(data, currentPos)
        responseInstance["e__ESDI_FirmwareType__FWTypeID"] = field
        currentPos += bytesProcessed
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__string__FWTypeSize"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_string.deserialize(data, currentPos, 20)
        responseInstance["string__FWType"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__FWVersionMaj"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__FWVersionMin"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetRAWSensors
        - function ID: 00000002
        - description: Get RAW sensor values by ID. Up to 50 different sensor values may be got.
    """
    def req_GetRAWSensors(self, uint32__PktIDReq, a__e__ESEPSII_BP_SensorIDs__50__SensorsIDs):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000002
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint32", uint32__PktIDReq)
        actualLen = len(a__e__ESEPSII_BP_SensorIDs__50__SensorsIDs)
    
        if (actualLen != 50):
            raise Exception("The exact expected size for array argument a__e__ESEPSII_BP_SensorIDs__50__SensorsIDs is 50 bytes but " + str(actualLen) + " bytes were provided.")
    
        requestBytes += SerDesHelpers.serdesType_customTypeArray.serialize(a__e__ESEPSII_BP_SensorIDs__50__SensorsIDs)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000002, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetRAWSensors
        - function ID: 00000002
        - description: Get RAW sensor values by ID. Up to 50 different sensor values may be got.
    """
    def resp_GetRAWSensors(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000002):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
        responseInstance["uint32__PktID"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basicArray.deserialize("int32", data, currentPos, 50)
        responseInstance["a__int32__50__SensorValues"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBatteryInfo
        - function ID: 00000003
        - description: Get device information
    """
    def req_GetBatteryInfo(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000003
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000003, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBatteryInfo
        - function ID: 00000003
        - description: Get device information
    """
    def resp_GetBatteryInfo(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000003):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__nConOpsMode"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint64", data, currentPos)
        responseInstance["uint64__nModulesMask"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattEnergy"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattCharge"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattChargeCapacity"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattPercent"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattVoltage"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattCurrent"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattTemperature"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetDeviceHealthInfo
        - function ID: 00000004
        - description: Get information about all chip statuses (driver state) and CPU temperature, voltage and running time
    """
    def req_GetDeviceHealthInfo(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000004
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000004, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetDeviceHealthInfo
        - function ID: 00000004
        - description: Get information about all chip statuses (driver state) and CPU temperature, voltage and running time
    """
    def resp_GetDeviceHealthInfo(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000004):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ActiveCPU_RunningTime"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ActiveCPU_Voltage"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ActiveCPU_Temperature"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__PCB_Temperature_1"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__PCB_Temperature_2"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__NVM_AllocatedSize"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__NVM_UsedSize"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__Stack_AllocatedSize"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__Stack_UsedSize"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__BALANCER_CHIP_1"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__BALANCER_CHIP_2"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_XP"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_XR"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_YP"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_YR"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_ZP"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_ZR"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__INA_BAT_OUT_1"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__INA_BAT_OUT_2"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__TMP117_U810"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__TMP117_U811"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__GPIO_PCA9538_U2001"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__GPIO_PCA9538_U2002"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: SetBatHeaterSettings
        - function ID: 00000005
        - description: Set batteries heaters settings
    """
    def req_SetBatHeaterSettings(self, e__SBH_EnableBitmask__EnableBitmask, int32__NormalModeSetPointTemp, int32__PhenixModeSetPointTemp, uint32__PID_KP, uint32__PID_KI, uint32__PID_KD):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000005
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_EPSII_BP_1.enum_SBH_EnableBitmask(e__SBH_EnableBitmask__EnableBitmask).serialize()
        requestBytes += SerDesHelpers.serdesType_basic.serialize("int32", int32__NormalModeSetPointTemp)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("int32", int32__PhenixModeSetPointTemp)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint32", uint32__PID_KP)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint32", uint32__PID_KI)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint32", uint32__PID_KD)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000005, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: SetBatHeaterSettings
        - function ID: 00000005
        - description: Set batteries heaters settings
    """
    def resp_SetBatHeaterSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000005):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_SBH_SetError.deserialize(data, currentPos)
        responseInstance["e__SBH_SetError__Err"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBatHeaterSettings
        - function ID: 00000006
        - description: Get current batteries heaters settings
    """
    def req_GetBatHeaterSettings(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000006
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000006, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBatHeaterSettings
        - function ID: 00000006
        - description: Get current batteries heaters settings
    """
    def resp_GetBatHeaterSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000006):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_SBH_EnableBitmask.deserialize(data, currentPos)
        responseInstance["e__SBH_EnableBitmask__EnableBitmask"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__NormalModeSetPointTemp"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__PhenixModeSetPointTemp"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
        responseInstance["uint32__PID_KP"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
        responseInstance["uint32__PID_KI"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
        responseInstance["uint32__PID_KD"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: SetBasicSettings
        - function ID: 00000007
        - description: Set basic device operation configuration.
    """
    def req_SetBasicSettings(self, s__BasicSettings):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000007
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += s__BasicSettings.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000007, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: SetBasicSettings
        - function ID: 00000007
        - description: Set basic device operation configuration.
    """
    def resp_SetBasicSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000007):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_SBS_SetError.deserialize(data, currentPos)
        responseInstance["e__SBS_SetError__Err"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBasicSettings
        - function ID: 00000008
        - description: Get current basic device settings
    """
    def req_GetBasicSettings(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000008
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000008, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBasicSettings
        - function ID: 00000008
        - description: Get current basic device settings
    """
    def resp_GetBasicSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            (fpHeaderInstance, headerBytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000008):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.enum_SBS_GetError.deserialize(data, currentPos)
        responseInstance["e__SBS_GetError__Err"] = field
        currentPos += bytesProcessed
    
        (field, bytesProcessed) = FP_API_EPSII_BP_1.struct_SBasicSettings.deserialize(data, currentPos)
        responseInstance["s__BasicSettings"] = field
        currentPos += bytesProcessed
    
        return responseInstance


    ############################################################################################################
    """
    Deserializes the provided bytearray and returns a dictionary of parsed values for the response;
    functionId parameter shall be supplied if the class is used in rawSerDesSupport mode, otherwise
    it is extracted from the FP header
    """
    def resp_parse(self, respBytes, functionId : int = 0):
        if not self.rawSerDesSupport:
            # try to parse FunctionProtocol header
            (fpHeaderInstance, bytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(respBytes, 0)
            funcId = fpHeaderInstance.u32FuncId

            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID):
                raise Exception("Unsupported protocol ID", fpHeaderInstance.u16ProtoId)
        else:
            funcId = functionId

        if funcId in self.responseParsersDict:
            respParserFunc = self.responseParsersDict[funcId]
            return respParserFunc(respBytes) if (respParserFunc != None) else None
        else:
            raise Exception('Unsupported function id', hex(funcId))
    ############################################################################################################
    """
    Returns the Protocol version as a string vM.m
    """
    def get_version(self):
        return f'v{self.versionMajor}.{self.versionMinor}'
    ############################################################################################################

