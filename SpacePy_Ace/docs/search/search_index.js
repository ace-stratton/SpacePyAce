var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"What is PyGS","text":"<p>It stands for Python Ground Station - a complete python bindings for the pkg/gs package. PyGS and GS packages essentially export the same API for different languages - Python and Go.</p>"},{"location":"index.html#build","title":"Build","text":"<ul> <li> <p>Install the following python packages:</p> <p>python3 -m pip install pybindgen python3 -m pip install --upgrade setuptools wheel</p> </li> <li> <p>Install gopy command:</p> <p>go install github.com/go-python/gopy@master</p> </li> <li> <p>Build py bindings (change -output to a preferred location): gopy build -build-tags=\"dbg_log\" -output=\"pygs\" . ../../pkg/gs ../../pkg/consts ../../pkg/misc ../../internal/event_notifier</p> </li> </ul> <p>dbg_log enables debug messages with exact line numbers</p> <p>The specified output folder will include the produced python PyGS module</p>"},{"location":"index.html#api","title":"API","text":"<p>Unlike the rest of the protocol integrations (e.g. jsgs, gssd), this one exposes the complete pkg/gs API. By its nature this package adds very little code and it mainly relies on gopy to generate Python bindings from pkg/gs.</p> <p>The built artifacts contain an auto generated pydoc documentation of the API.</p>"},{"location":"index.html#package-structure","title":"Package structure","text":"<ul> <li>pygs.go is a tiny file, which contain any logic, which cannot be auto-generated by gopy.</li> </ul>"},{"location":"index.html#dependencies","title":"Dependencies","text":"<p>This package uses pkg/gs, pkg/consts and pkg/misc packages to generate the Python bindings.</p>"},{"location":"index.html#usage","title":"Usage","text":"<p>To use, simply import the module produced by the build.</p> <p>The standard scenario is to create a ground station (GS), then use it to dial a connection to the target module using a multi-address to that module. On both steps, options should be specified using the \"With...\" functions in order to initialize the multi-address components (protocol layers). Finally the connection functions Write, Read and eventually Close are used to exchange data with the target module.</p> <p>Please refer to the examples directory for pygs example files.</p>"},{"location":"index.html#manet-multi-address-net-structure","title":"Manet (multi-address net) structure","text":"<p>Knowing how to structure the proper manet address of the module you are trying to dial is mandatory for successful usage of PyGS. </p> <p>If you have done any sort of network (socket) programming in any language (C, Python, etc.) you should be familiar with the socket/connection concepts, which are adopted here. And you should be familiar that there is a concept of socket/host addresses of some sort. In short we've adopted manet's API to abstract Endurosat's protocols. manet is an evolution of Go's net package that allows more explicit control of protocol initialization, including more parameters in the host address and stacking your protocols on top of each other using the host address string like so:</p> <p>/proto1/param1:param2/proto2/proto3/param1:param2:param3</p> <p>This is very handy for API users, because it gives them a simple mechanism to address their host using the protocols they prefer - all expressed in the host address string.</p> <p>Think about a TCP/IP connection. The stacked protocols which are used, are defined for you internally - they are TCP, IP and some underlying datalink protocol or protocols pre-configured for the datalink connection. The same can be achieved using multi-address, but multi-addresses can be more explicit. In our case as API users, before dialing a host we want to pick the (ESPS) protocols we need and provide their parameters, all as part of the host address.</p> <p>Bellow are links to our protocol layers with details how each layer multi addresses are structured in the specific context of communication with ES modules.</p> <ul> <li>Datalink - Mac, etc.</li> <li>Transport</li> <li>Present - CP, FW Update, FP, etc.</li> </ul> <p>It's worth noting that the protocols you can specify in the multiaddress are not fixed, for transportation you can use just as well TCP/IP or UDP. If support for that is added, though, the dialer will have to keep in mind any underlying protocol specifics.</p> <p>Speaking of underlying specifics, please keep in mind that while CP and FWUpd present layer protocols require a TP layer beneath them, the FP protocol is for intermodule communication only and shouldn't have a TP layer specified in it's multi-address (e.g. /esmgw/51/esfp)</p> <p>For further technical details on how we use and implement manet addresses please check Protocol. </p>"},{"location":"index.html#with-options","title":"\"With...\" options","text":"<p>We make heavy use of the so called functional option pattern when it comes to configuring our connections before and during dialing. In a nutshell, the idea is that you have a lot of \"With...\" functions that you can pass as a parameter to the GS constructor function or the GS Dial function. They support specifying only specific configuration options, such as TP layer timeouts, or specifying a whole YAML file, that holds all the needed configuration.</p> <p>Furthermore, we have two types of \"With...\" functional options</p> <ul> <li>\"With...\" (e.g. \"WithFile\", \"WithCommSerial\") - these options can be valid for all connections and can be specified either through a config YAML file or through passing the \"With...\" function to the GS constructor or dial</li> <li>\"With...Conn\" (e.g. \"WithMacGwConn\") - these options are specific to only one connection and can't be specified in a config YAML file. The only way to provide them is by passing the \"With...Conn\" function to the GS constructor or dial</li> </ul>"},{"location":"index.html#newgs","title":"NewGS","text":"<p>You can find some example code bellow. We load all base configuration options from config.yml and then configure the MacGW connection with ID of the underlying protocol we'll be using (TP, in this case). However, we might want to set the comm serial to be our Mac Dongle. Since we'll be transmitting a CP command we configure the TP connection with the proper protocol ID we'll be using it to transport (CP) and we set some contextually important for the TP layer options (packetId and hostContext). Furthermore, we configure our CP connection with contextually important options. </p> <pre><code>from pygs import gs, consts\n\ngs1 = gs.NewGS(\n    gs.WithFile(\"../gssd/config.yml\"),\n    gs.WithMacGWConn(macProtoId=consts.MacProtoId_TP),\n    gs.WithCommSerial(\"/dev/ttyACM1\", 115200, \"1s\"),\n    gs.WithTPConn(tpProtoId=consts.TPProtoId_CP, packetId=13, hostContext=13),\n    gs.WithCPConn(cmdId=13, cmdType=1302, cpTripType=consts.CPTripType_ImmediateRes),\n)\n</code></pre> <p>As you might have noticed by now sometimes we use \"With...Conn\" functional options to set highly specific protocol options - cmdId, cmdType and cpTripType are all part of the CP command's header.</p>"},{"location":"index.html#dial","title":"Dial","text":"<p>Dial can be called with functional options in addition to the multi-address, as well. Note that passing a custom options to Dial() would overwrite all previous options, so make sure to call WithGS() first to apply the previous options.</p> <pre><code>from pygs import pygs\n\nconn = gs1.Dial(\n    \"/esmgw/51/esfp\",\n    gs.WithGS(gs1),\n    gs.WithCommSerial(\"/dev/ttyACM3\", 115200, \"100ms\"),\n)\n</code></pre>"},{"location":"index.html#notifier-callbacks","title":"Notifier callbacks","text":"<p>Go Comms core has support for two notification callbacks that can be registered through PyGS.</p>"},{"location":"index.html#notify-on-tp-burst-write","title":"Notify on TP burst write","text":"<p>The user provided delegate will get called every time a TP burst of data is successfully written</p> <pre><code>from pygs import pygs\n\ndef notify():\n    print(\"Write burst completed\")\n\nonNotify = pygs.PyNotify()\nonNotify.CallBack(notify)\nconn.Subscribe(pygs.PyToGsNotify(onNotify))\n</code></pre>"},{"location":"index.html#notify-on-data-read","title":"Notify on data read","text":"<p>The user provided delegate will get called every time a response from the target module is received  </p> <pre><code>from pygs import pygs\n\ndata = gs.DataResult()\ndef dataNotify():\n    print(\"Data notify:\")\n    print(bytes(data.Data))\n    nonlocal bytesWritten\n    bytesWritten = len(bytes(data.Data))\n\nonDataNotify = pygs.PyDataNotify(Data=data)\nonDataNotify.CallBack(dataNotify)\nconn.SubscribeData(pygs.PyToGsDataNotify(onDataNotify))\n</code></pre>"},{"location":"index.html#notify-on-frame-read","title":"Notify on frame read","text":"<p>The user provided delegate will get called any time a Mac frame is written or read</p> <pre><code>from pygs import pygs\n\nframe = gs.FrameResult()\ndef frameNotify():\n    if frame.IsRead:\n        print('Incoming Mac frame from {}, to {} - {}\\n'.format(frame.RemoteAddr, frame.LocalAddr, bytes(frame.Data)))\n    else:\n        print('Outgoing Mac frame from {}, to {} - {}\\n'.format(frame.LocalAddr, frame.RemoteAddr, bytes(frame.Data)))\n\nonFrameNotify = pygs.PyFrameNotify(Frame=frame)\nonFrameNotify.CallBack(frameNotify)\nconn.SubscribeFrame(pygs.PyToGsFrameNotify(onFrameNotify))\n</code></pre>"},{"location":"index.html#alternative-event-notifier-mechnism","title":"Alternative event notifier mech\u0430nism","text":"<p>There more fine-grained event notifiers available, which can be subscribed to</p> <pre><code>from pygs import event_notifier\n\ndef onSyncSent(data):\n    print(\"s\", end='')\n\ndef onDataSent(data):\n    print(\"d\", end='')\n\nsyncSent = event_notifier.Get(event_notifier.EventNotifierId_TPSyncSent)\nsyncSent.Subscribe(event_notifier.NewFuncEventObserver(onSyncSent, syncSent))\n\ndataSent = event_notifier.Get(event_notifier.EventNotifierId_TPDataSent)\ndataSent.Subscribe(event_notifier.NewFuncEventObserver(onDataSent, dataSent))\n</code></pre>"},{"location":"index.html#how-to-continue","title":"How to continue","text":"<p>Please, familiarize yourself with the generated pydoc API documentation inside the doc directory of the shipped package and refer to the examples directory for Python examples. You might also want to use a modern IDE when importing PyGS, which will auto-complete your code.</p>"},{"location":"consts.html","title":"consts","text":""},{"location":"consts.html#src.consts.AirProtoId_ChangeRadioFreq","title":"<code>AirProtoId_ChangeRadioFreq = 5</code>  <code>module-attribute</code>","text":"<p>Change the radio frequency.</p>"},{"location":"consts.html#src.consts.AirProtoId_Init","title":"<code>AirProtoId_Init = 1</code>  <code>module-attribute</code>","text":"<p>Used to initiate an air handshake request.</p>"},{"location":"consts.html#src.consts.AirProtoId_None","title":"<code>AirProtoId_None = 0</code>  <code>module-attribute</code>","text":"<p>Used to ignore the protocol ID.</p>"},{"location":"consts.html#src.consts.AirProtoId_Reset","title":"<code>AirProtoId_Reset = 4</code>  <code>module-attribute</code>","text":"<p>Reset.</p>"},{"location":"consts.html#src.consts.AirProtoId_Response","title":"<code>AirProtoId_Response = 2</code>  <code>module-attribute</code>","text":"<p>Used to respond to an air handshake request.</p>"},{"location":"consts.html#src.consts.AirProtoId_TL","title":"<code>AirProtoId_TL = 3</code>  <code>module-attribute</code>","text":"<p>ESPS transport protocol.</p>"},{"location":"consts.html#src.consts.AirProtoId_TextBegin","title":"<code>AirProtoId_TextBegin = 32</code>  <code>module-attribute</code>","text":"<p>Begin a text message.</p>"},{"location":"consts.html#src.consts.AirProtoId_TextEnd","title":"<code>AirProtoId_TextEnd = 127</code>  <code>module-attribute</code>","text":"<p>End a text message.</p>"},{"location":"consts.html#src.consts.CPTripType_ImmediateRes","title":"<code>CPTripType_ImmediateRes = 1</code>  <code>module-attribute</code>","text":"<p>Response is returned immediately.</p>"},{"location":"consts.html#src.consts.CPTripType_NoRes","title":"<code>CPTripType_NoRes = 0</code>  <code>module-attribute</code>","text":"<p>No response is returned.</p>"},{"location":"consts.html#src.consts.CPTripType_PostponedRes","title":"<code>CPTripType_PostponedRes = 2</code>  <code>module-attribute</code>","text":"<p>Response is not returned after a command, but should be requested additionally.</p>"},{"location":"consts.html#src.consts.DatalinkProto_Amac","title":"<code>DatalinkProto_Amac = 2</code>  <code>module-attribute</code>","text":"<p>AirMac protocol used for SDR.</p>"},{"location":"consts.html#src.consts.DatalinkProto_Gnur","title":"<code>DatalinkProto_Gnur = 5</code>  <code>module-attribute</code>","text":"<p>GnuRadio service protocol for SDR configuration (e.g. frequency change).</p>"},{"location":"consts.html#src.consts.DatalinkProto_Mac","title":"<code>DatalinkProto_Mac = 4</code>  <code>module-attribute</code>","text":"<p>MAC protocol used for RS485.</p>"},{"location":"consts.html#src.consts.DatalinkProto_MacGW","title":"<code>DatalinkProto_MacGW = 1</code>  <code>module-attribute</code>","text":"<p>MAC gateway protocol used for MAC dongle.</p>"},{"location":"consts.html#src.consts.DatalinkProto_UhfGW","title":"<code>DatalinkProto_UhfGW = 3</code>  <code>module-attribute</code>","text":"<p>UHF gateway protocol used for UHF.</p>"},{"location":"consts.html#src.consts.EESTL_SFERR_RECOVERABLE_MARGIN","title":"<code>EESTL_SFERR_RECOVERABLE_MARGIN = 100</code>  <code>module-attribute</code>","text":"<p>Values less than this one indicate recoverable errors.</p>"},{"location":"consts.html#src.consts.FWUpdCmd_Status","title":"<code>FWUpdCmd_Status = 1</code>  <code>module-attribute</code>","text":"<p>Get the status of the firmware update. Triggers a response.</p>"},{"location":"consts.html#src.consts.FWUpdCmd_Update","title":"<code>FWUpdCmd_Update = 2</code>  <code>module-attribute</code>","text":"<p>Execute a firmware update for an already uploaded file. Doesn't trigger a response.</p>"},{"location":"consts.html#src.consts.FWUpdCmd_Upload","title":"<code>FWUpdCmd_Upload = 0</code>  <code>module-attribute</code>","text":"<p>Upload a firmware update. Can be used to upload any type of file. Triggers a response.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_Archived","title":"<code>FWUpdFlag_Archived = 4</code>  <code>module-attribute</code>","text":"<p>The firmware update is archived.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_Downloaded","title":"<code>FWUpdFlag_Downloaded = 16</code>  <code>module-attribute</code>","text":"<p>Downloaded.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_Encrypted","title":"<code>FWUpdFlag_Encrypted = 2</code>  <code>module-attribute</code>","text":"<p>The firmware update is encrypted.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_File_Cmd","title":"<code>FWUpdFlag_File_Cmd = 1024</code>  <code>module-attribute</code>","text":"<p>A command file.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_File_Safe_App","title":"<code>FWUpdFlag_File_Safe_App = 64</code>  <code>module-attribute</code>","text":"<p>File_Safe_App</p>"},{"location":"consts.html#src.consts.FWUpdFlag_File_Tle","title":"<code>FWUpdFlag_File_Tle = 128</code>  <code>module-attribute</code>","text":"<p>The firmware update is a TLE file.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_File_Zip","title":"<code>FWUpdFlag_File_Zip = 512</code>  <code>module-attribute</code>","text":"<p>A zip file.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_Healthy","title":"<code>FWUpdFlag_Healthy = 8</code>  <code>module-attribute</code>","text":"<p>The firmware update is healthy.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_Install_Pending","title":"<code>FWUpdFlag_Install_Pending = 32</code>  <code>module-attribute</code>","text":"<p>The firmware update is pending installation.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_Installed","title":"<code>FWUpdFlag_Installed = 1</code>  <code>module-attribute</code>","text":"<p>The firmware update is installed.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_None","title":"<code>FWUpdFlag_None = 0</code>  <code>module-attribute</code>","text":"<p>No flags.</p>"},{"location":"consts.html#src.consts.FWUpdFlag_Payload_Schedule","title":"<code>FWUpdFlag_Payload_Schedule = 256</code>  <code>module-attribute</code>","text":"<p>Payload schedule</p>"},{"location":"consts.html#src.consts.FWUpdStatus_Completed","title":"<code>FWUpdStatus_Completed = 3</code>  <code>module-attribute</code>","text":"<p>The FW update has completed.</p>"},{"location":"consts.html#src.consts.FWUpdStatus_Invalid","title":"<code>FWUpdStatus_Invalid = 2</code>  <code>module-attribute</code>","text":"<p>The FW update file is invalid.</p>"},{"location":"consts.html#src.consts.FWUpdStatus_NoFile","title":"<code>FWUpdStatus_NoFile = 0</code>  <code>module-attribute</code>","text":"<p>No FW update file is present.</p>"},{"location":"consts.html#src.consts.FWUpdStatus_Pending","title":"<code>FWUpdStatus_Pending = 1</code>  <code>module-attribute</code>","text":"<p>A FW update is being executed.</p>"},{"location":"consts.html#src.consts.GnurProtoId_ChangeRadioFreq","title":"<code>GnurProtoId_ChangeRadioFreq = 1</code>  <code>module-attribute</code>","text":"<p>Change the radio frequency.</p>"},{"location":"consts.html#src.consts.GnurProtoId_None","title":"<code>GnurProtoId_None = 0</code>  <code>module-attribute</code>","text":"<p>A default value for a GNUR protocol ID.</p>"},{"location":"consts.html#src.consts.GnurProtoId_SendAmacFrame","title":"<code>GnurProtoId_SendAmacFrame = 2</code>  <code>module-attribute</code>","text":"<p>Send an actual AirMac frame.</p>"},{"location":"consts.html#src.consts.MacGWIntf_Pay_Pri","title":"<code>MacGWIntf_Pay_Pri = 2</code>  <code>module-attribute</code>","text":"<p>Payload primary interface.</p>"},{"location":"consts.html#src.consts.MacGWIntf_Pay_sec","title":"<code>MacGWIntf_Pay_sec = 3</code>  <code>module-attribute</code>","text":"<p>Payload secondary interface.</p>"},{"location":"consts.html#src.consts.MacGWIntf_Sys_Pri","title":"<code>MacGWIntf_Sys_Pri = 0</code>  <code>module-attribute</code>","text":"<p>Primary interface.</p>"},{"location":"consts.html#src.consts.MacGWIntf_Sys_Sec","title":"<code>MacGWIntf_Sys_Sec = 1</code>  <code>module-attribute</code>","text":"<p>Secondary interface.</p>"},{"location":"consts.html#src.consts.MacPrio_TQ","title":"<code>MacPrio_TQ = 1</code>  <code>module-attribute</code>","text":"<p>Time quantum - the time it takes to transmit 18 bits (if the speed is 50 000 bps, T q = 360 \u00b5s)</p>"},{"location":"consts.html#src.consts.MacPrio_TQSpan","title":"<code>MacPrio_TQSpan = 6</code>  <code>module-attribute</code>","text":"<p>Keep those in TQ and at least 2 between them And not below 1, since inter byte delay may fool some node to start transmitting in middle of message</p>"},{"location":"consts.html#src.consts.MacProtoId_Debug","title":"<code>MacProtoId_Debug = 7</code>  <code>module-attribute</code>","text":"<p>Debug.</p>"},{"location":"consts.html#src.consts.MacProtoId_Diagnostics","title":"<code>MacProtoId_Diagnostics = 4</code>  <code>module-attribute</code>","text":"<p>Diagnostics.</p>"},{"location":"consts.html#src.consts.MacProtoId_EPSI","title":"<code>MacProtoId_EPSI = 10</code>  <code>module-attribute</code>","text":"<p>EPSI</p>"},{"location":"consts.html#src.consts.MacProtoId_FP","title":"<code>MacProtoId_FP = 12</code>  <code>module-attribute</code>","text":"<p>ESPS FP protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId_FWUpd","title":"<code>MacProtoId_FWUpd = 2</code>  <code>module-attribute</code>","text":"<p>ESPS FW update protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId_LED","title":"<code>MacProtoId_LED = 6</code>  <code>module-attribute</code>","text":"<p>LED test.</p>"},{"location":"consts.html#src.consts.MacProtoId_MACTest","title":"<code>MacProtoId_MACTest = 255</code>  <code>module-attribute</code>","text":"<p>MAC test.</p>"},{"location":"consts.html#src.consts.MacProtoId_NetDebug","title":"<code>MacProtoId_NetDebug = 3</code>  <code>module-attribute</code>","text":"<p>NetDebug.</p>"},{"location":"consts.html#src.consts.MacProtoId_None","title":"<code>MacProtoId_None = 0</code>  <code>module-attribute</code>","text":"<p>Used to ignore the protocol ID.</p>"},{"location":"consts.html#src.consts.MacProtoId_Service","title":"<code>MacProtoId_Service = 13</code>  <code>module-attribute</code>","text":"<p>ESPS Service protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId_TP","title":"<code>MacProtoId_TP = 11</code>  <code>module-attribute</code>","text":"<p>ESPS TP transport protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId_UHF","title":"<code>MacProtoId_UHF = 5</code>  <code>module-attribute</code>","text":"<p>UHF.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_EPSII_BP","title":"<code>ModuleTypeId_EPSII_BP = 3</code>  <code>module-attribute</code>","text":"<p>EPS II BP module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_EPSII_BPL","title":"<code>ModuleTypeId_EPSII_BPL = 4</code>  <code>module-attribute</code>","text":"<p>EPS II BPL module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_EPSII_PDM","title":"<code>ModuleTypeId_EPSII_PDM = 2</code>  <code>module-attribute</code>","text":"<p>EPS II PDM module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_EPS_I","title":"<code>ModuleTypeId_EPS_I = 8</code>  <code>module-attribute</code>","text":"<p>EPS I module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_MSPMacGatewayDev","title":"<code>ModuleTypeId_MSPMacGatewayDev = 1</code>  <code>module-attribute</code>","text":"<p>MSP MAC gateway device module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_OBC1016","title":"<code>ModuleTypeId_OBC1016 = 5</code>  <code>module-attribute</code>","text":"<p>OBC 1016 module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_OBC2","title":"<code>ModuleTypeId_OBC2 = 6</code>  <code>module-attribute</code>","text":"<p>OBC 2 module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_SBAND_TMTC","title":"<code>ModuleTypeId_SBAND_TMTC = 9</code>  <code>module-attribute</code>","text":"<p>S-band TMTC module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_UHF2","title":"<code>ModuleTypeId_UHF2 = 7</code>  <code>module-attribute</code>","text":"<p>UHF 2 module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId_Unknown","title":"<code>ModuleTypeId_Unknown = 0</code>  <code>module-attribute</code>","text":"<p>A default value for a module type ID.</p>"},{"location":"consts.html#src.consts.RFConfigMode_1200_600","title":"<code>RFConfigMode_1200_600 = 0</code>  <code>module-attribute</code>","text":"<p>1200 baud, 600 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode_19200_19200","title":"<code>RFConfigMode_19200_19200 = 7</code>  <code>module-attribute</code>","text":"<p>19200 baud, 19200 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode_19200_4800","title":"<code>RFConfigMode_19200_4800 = 5</code>  <code>module-attribute</code>","text":"<p>19200 baud, 4800 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode_19200_9600","title":"<code>RFConfigMode_19200_9600 = 6</code>  <code>module-attribute</code>","text":"<p>19200 baud, 9600 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode_2400_600","title":"<code>RFConfigMode_2400_600 = 1</code>  <code>module-attribute</code>","text":"<p>2400 baud, 600 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode_4800_1200","title":"<code>RFConfigMode_4800_1200 = 2</code>  <code>module-attribute</code>","text":"<p>4800 baud, 1200 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode_9600_2400","title":"<code>RFConfigMode_9600_2400 = 3</code>  <code>module-attribute</code>","text":"<p>9600 baud, 2400 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode_9600_4800","title":"<code>RFConfigMode_9600_4800 = 4</code>  <code>module-attribute</code>","text":"<p>9600 baud, 4800 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigRadioMode_RX","title":"<code>RFConfigRadioMode_RX = 2</code>  <code>module-attribute</code>","text":"<p>The radio is in receive mode.</p>"},{"location":"consts.html#src.consts.RFConfigRadioMode_Sleep","title":"<code>RFConfigRadioMode_Sleep = 0</code>  <code>module-attribute</code>","text":"<p>The radio is in sleep mode.</p>"},{"location":"consts.html#src.consts.RFConfigRadioMode_TX","title":"<code>RFConfigRadioMode_TX = 1</code>  <code>module-attribute</code>","text":"<p>The radio is in transmit mode.</p>"},{"location":"consts.html#src.consts.RFConfigType_ChangeAESKey","title":"<code>RFConfigType_ChangeAESKey = 4</code>  <code>module-attribute</code>","text":"<p>Change AES key.</p>"},{"location":"consts.html#src.consts.RFConfigType_ChangeFreq","title":"<code>RFConfigType_ChangeFreq = 5</code>  <code>module-attribute</code>","text":"<p>Change radio frequency.</p>"},{"location":"consts.html#src.consts.RFConfigType_ChangeRadioMode","title":"<code>RFConfigType_ChangeRadioMode = 3</code>  <code>module-attribute</code>","text":"<p>Change radio mode.</p>"},{"location":"consts.html#src.consts.RFConfigType_ChangeUHFFreq","title":"<code>RFConfigType_ChangeUHFFreq = 2</code>  <code>module-attribute</code>","text":"<p>Change uplink, downlink frequencies and RF config.</p>"},{"location":"consts.html#src.consts.RFConfigType_Init","title":"<code>RFConfigType_Init = 1</code>  <code>module-attribute</code>","text":"<p>Initialize radio and sets uplink, downlink frequencies, RF config and radio mode.</p>"},{"location":"consts.html#src.consts.SubModuleId_FileUpload","title":"<code>SubModuleId_FileUpload = 2</code>  <code>module-attribute</code>","text":"<p>FWUpd is used to simply upload a file if the module supports it.</p>"},{"location":"consts.html#src.consts.SubModuleId_ModuleFWUpd","title":"<code>SubModuleId_ModuleFWUpd = 0</code>  <code>module-attribute</code>","text":"<p>Perform a FW update of an ES module.</p>"},{"location":"consts.html#src.consts.SubModuleId_PayloadFWUpd","title":"<code>SubModuleId_PayloadFWUpd = 1</code>  <code>module-attribute</code>","text":"<p>Perform a FW update, targeted to a payload computer.</p>"},{"location":"consts.html#src.consts.TPProtoId_CP","title":"<code>TPProtoId_CP = 10</code>  <code>module-attribute</code>","text":"<p>The encapsulated data is a CP command.</p>"},{"location":"consts.html#src.consts.TPProtoId_FWUpd","title":"<code>TPProtoId_FWUpd = 14</code>  <code>module-attribute</code>","text":"<p>The encapsulated data is a firmware update.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_AsyncErr","title":"<code>UhfGWCmd_AsyncErr = 3</code>  <code>module-attribute</code>","text":"<p>An asynchronous error.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_ChangeAESKey","title":"<code>UhfGWCmd_ChangeAESKey = 8</code>  <code>module-attribute</code>","text":"<p>Change the AES key.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_ChangeRadioFreq","title":"<code>UhfGWCmd_ChangeRadioFreq = 7</code>  <code>module-attribute</code>","text":"<p>Change the radio frequency.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_ChangeRadioMode","title":"<code>UhfGWCmd_ChangeRadioMode = 5</code>  <code>module-attribute</code>","text":"<p>Change the radio mode.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_InitRadio","title":"<code>UhfGWCmd_InitRadio = 4</code>  <code>module-attribute</code>","text":"<p>Initialize the radio.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_None","title":"<code>UhfGWCmd_None = 0</code>  <code>module-attribute</code>","text":"<p>A default value for a UHF GW command.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_TunIn","title":"<code>UhfGWCmd_TunIn = 2</code>  <code>module-attribute</code>","text":"<p>Receive an inbound frame.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_TunInAx25","title":"<code>UhfGWCmd_TunInAx25 = 6</code>  <code>module-attribute</code>","text":"<p>An AX.25 beacon.</p>"},{"location":"consts.html#src.consts.UhfGWCmd_TunOut","title":"<code>UhfGWCmd_TunOut = 1</code>  <code>module-attribute</code>","text":"<p>Send an outbound frame.</p>"},{"location":"consts.html#src.consts.AddressMap","title":"<code>AddressMap</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Map of addresses to connect to. Used in GS configuration.</p> Source code in <code>src/consts.py</code> <pre><code>class AddressMap(go.GoClass):\n\t\"\"\"Map of addresses to connect to. Used in GS configuration.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.consts_AddressMap_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Mapping):\n\t\t\t\t\traise TypeError('consts_AddressMap.__init__ takes a mapping as argument')\n\t\t\t\tfor k, v in args[0].items():\n\t\t\t\t\t_pygs.consts_AddressMap_set(self.handle, k, v)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'pygs.consts_AddressMap len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'\n\t\tif len(self) &lt; 120:\n\t\t\tfor k, v in self.items():\n\t\t\t\ts += str(k) + '=' + str(v) + ', '\n\t\treturn s + '}'\n\tdef __repr__(self):\n\t\ts = 'pygs.consts_AddressMap({'\n\t\tfor k, v in self.items():\n\t\t\ts += str(k) + '=' + str(v) + ', '\n\t\treturn s + '})'\n\tdef __len__(self):\n\t\treturn _pygs.consts_AddressMap_len(self.handle)\n\tdef __getitem__(self, key):\n\t\treturn _pygs.consts_AddressMap_elem(self.handle, key)\n\tdef __setitem__(self, key, value):\n\t\t_pygs.consts_AddressMap_set(self.handle, key, value)\n\tdef __delitem__(self, key):\n\t\treturn _pygs.consts_AddressMap_delete(self.handle, key)\n\tdef keys(self):\n\t\treturn go.Slice_string(handle=_pygs.consts_AddressMap_keys(self.handle))\n\tdef values(self):\n\t\tvls = []\n\t\tkys = self.keys()\n\t\tfor k in kys:\n\t\t\tvls.append(self[k])\n\t\treturn vls\n\tdef items(self):\n\t\tvls = []\n\t\tkys = self.keys()\n\t\tfor k in kys:\n\t\t\tvls.append((k, self[k]))\n\t\treturn vls\n\tdef __iter__(self):\n\t\treturn iter(self.items())\n\tdef __contains__(self, key):\n\t\treturn _pygs.consts_AddressMap_contains(self.handle, key)\n\tdef Add(self, val, goRun=False):\n\t\t\"\"\"Add(str val) \n\n\t\tAdd a new address to the map\n\t\t\"\"\"\n\t\t_pygs.consts_AddressMap_Add(self.handle, val, goRun)\n\tdef MarshalYAML(self):\n\t\t\"\"\"MarshalYAML() object, str\n\n\t\tMarshal the map to a string.\n\t\t\"\"\"\n\t\treturn any(handle=_pygs.consts_AddressMap_MarshalYAML(self.handle))\n\tdef UnmarshalYAML(self, value):\n\t\t\"\"\"UnmarshalYAML(object value) str\n\n\t\tInitialize the AddressMap from a string.\n\t\t\"\"\"\n\t\treturn _pygs.consts_AddressMap_UnmarshalYAML(self.handle, value.handle)\n</code></pre>"},{"location":"consts.html#src.consts.AddressMap.Add","title":"<code>Add(val, goRun=False)</code>","text":"<p>Add(str val) </p> <p>Add a new address to the map</p> Source code in <code>src/consts.py</code> <pre><code>def Add(self, val, goRun=False):\n\t\"\"\"Add(str val) \n\n\tAdd a new address to the map\n\t\"\"\"\n\t_pygs.consts_AddressMap_Add(self.handle, val, goRun)\n</code></pre>"},{"location":"consts.html#src.consts.AddressMap.MarshalYAML","title":"<code>MarshalYAML()</code>","text":"<p>MarshalYAML() object, str</p> <p>Marshal the map to a string.</p> Source code in <code>src/consts.py</code> <pre><code>def MarshalYAML(self):\n\t\"\"\"MarshalYAML() object, str\n\n\tMarshal the map to a string.\n\t\"\"\"\n\treturn any(handle=_pygs.consts_AddressMap_MarshalYAML(self.handle))\n</code></pre>"},{"location":"consts.html#src.consts.AddressMap.UnmarshalYAML","title":"<code>UnmarshalYAML(value)</code>","text":"<p>UnmarshalYAML(object value) str</p> <p>Initialize the AddressMap from a string.</p> Source code in <code>src/consts.py</code> <pre><code>def UnmarshalYAML(self, value):\n\t\"\"\"UnmarshalYAML(object value) str\n\n\tInitialize the AddressMap from a string.\n\t\"\"\"\n\treturn _pygs.consts_AddressMap_UnmarshalYAML(self.handle, value.handle)\n</code></pre>"},{"location":"consts.html#src.consts.AddressMap.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/consts.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.consts_AddressMap_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Mapping):\n\t\t\t\traise TypeError('consts_AddressMap.__init__ takes a mapping as argument')\n\t\t\tfor k, v in args[0].items():\n\t\t\t\t_pygs.consts_AddressMap_set(self.handle, k, v)\n</code></pre>"},{"location":"consts.html#src.consts.AirProtoId","title":"<code>AirProtoId</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The higher level protocol, which the Air Mac protocol encapsulates.</p> Source code in <code>src/consts.py</code> <pre><code>class AirProtoId(Enum):\n\t\"\"\"\n\tThe higher level protocol, which the Air Mac protocol encapsulates.\n\n\t\"\"\"\n\tAirProtoId_None = 0\n\t\"\"\"\n\tUsed to ignore the protocol ID.\n\n\t\"\"\"\n\tAirProtoId_Init = 1\n\t\"\"\"\n\tUsed to initiate an air handshake request.\n\n\t\"\"\"\n\tAirProtoId_Response = 2\n\t\"\"\"\n\tUsed to respond to an air handshake request.\n\n\t\"\"\"\n\tAirProtoId_TL = 3\n\t\"\"\"\n\tESPS transport protocol.\n\n\t\"\"\"\n\tAirProtoId_Reset = 4\n\t\"\"\"\n\tReset.\n\n\t\"\"\"\n\tAirProtoId_ChangeRadioFreq = 5\n\t\"\"\"\n\tChange the radio frequency.\n\n\t\"\"\"\n\tAirProtoId_TextBegin = 32\n\t\"\"\"\n\tBegin a text message.\n\n\t\"\"\"\n\tAirProtoId_TextEnd = 127\n\t\"\"\"\n\tEnd a text message.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_ChangeRadioFreq","title":"<code>AirProtoId_ChangeRadioFreq = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change the radio frequency.</p>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_Init","title":"<code>AirProtoId_Init = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Used to initiate an air handshake request.</p>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_None","title":"<code>AirProtoId_None = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Used to ignore the protocol ID.</p>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_Reset","title":"<code>AirProtoId_Reset = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Reset.</p>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_Response","title":"<code>AirProtoId_Response = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Used to respond to an air handshake request.</p>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_TL","title":"<code>AirProtoId_TL = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ESPS transport protocol.</p>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_TextBegin","title":"<code>AirProtoId_TextBegin = 32</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Begin a text message.</p>"},{"location":"consts.html#src.consts.AirProtoId.AirProtoId_TextEnd","title":"<code>AirProtoId_TextEnd = 127</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>End a text message.</p>"},{"location":"consts.html#src.consts.CPTripType","title":"<code>CPTripType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The way command responses are returned.</p> Source code in <code>src/consts.py</code> <pre><code>class CPTripType(Enum):\n\t\"\"\"\n\tThe way command responses are returned.\n\n\t\"\"\"\n\tCPTripType_NoRes = 0\n\t\"\"\"\n\tNo response is returned.\n\n\t\"\"\"\n\tCPTripType_ImmediateRes = 1\n\t\"\"\"\n\tResponse is returned immediately.\n\n\t\"\"\"\n\tCPTripType_PostponedRes = 2\n\t\"\"\"\n\tResponse is not returned after a command, but should be requested additionally.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.CPTripType.CPTripType_ImmediateRes","title":"<code>CPTripType_ImmediateRes = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Response is returned immediately.</p>"},{"location":"consts.html#src.consts.CPTripType.CPTripType_NoRes","title":"<code>CPTripType_NoRes = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>No response is returned.</p>"},{"location":"consts.html#src.consts.CPTripType.CPTripType_PostponedRes","title":"<code>CPTripType_PostponedRes = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Response is not returned after a command, but should be requested additionally.</p>"},{"location":"consts.html#src.consts.DatalinkProto","title":"<code>DatalinkProto</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The datalink (MAC) protocol.</p> Source code in <code>src/consts.py</code> <pre><code>class DatalinkProto(Enum):\n\t\"\"\"\n\tThe datalink (MAC) protocol.\n\n\t\"\"\"\n\tDatalinkProto_MacGW = 1\n\t\"\"\"\n\tMAC gateway protocol used for MAC dongle.\n\n\t\"\"\"\n\tDatalinkProto_Amac = 2\n\t\"\"\"\n\tAirMac protocol used for SDR.\n\n\t\"\"\"\n\tDatalinkProto_UhfGW = 3\n\t\"\"\"\n\tUHF gateway protocol used for UHF.\n\n\t\"\"\"\n\tDatalinkProto_Mac = 4\n\t\"\"\"\n\tMAC protocol used for RS485.\n\n\t\"\"\"\n\tDatalinkProto_Gnur = 5\n\t\"\"\"\n\tGnuRadio service protocol for SDR configuration (e.g. frequency change).\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.DatalinkProto.DatalinkProto_Amac","title":"<code>DatalinkProto_Amac = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>AirMac protocol used for SDR.</p>"},{"location":"consts.html#src.consts.DatalinkProto.DatalinkProto_Gnur","title":"<code>DatalinkProto_Gnur = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>GnuRadio service protocol for SDR configuration (e.g. frequency change).</p>"},{"location":"consts.html#src.consts.DatalinkProto.DatalinkProto_Mac","title":"<code>DatalinkProto_Mac = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MAC protocol used for RS485.</p>"},{"location":"consts.html#src.consts.DatalinkProto.DatalinkProto_MacGW","title":"<code>DatalinkProto_MacGW = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MAC gateway protocol used for MAC dongle.</p>"},{"location":"consts.html#src.consts.DatalinkProto.DatalinkProto_UhfGW","title":"<code>DatalinkProto_UhfGW = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>UHF gateway protocol used for UHF.</p>"},{"location":"consts.html#src.consts.FWUpdBundleParams","title":"<code>FWUpdBundleParams</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>FW update bundle parameters.</p> Source code in <code>src/consts.py</code> <pre><code>class FWUpdBundleParams(go.GoClass):\n\t\"\"\"FW update bundle parameters.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.consts_FWUpdBundleParams_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.SubModule = args[0]\n\t\t\tif \"SubModule\" in kwargs:\n\t\t\t\tself.SubModule = kwargs[\"SubModule\"]\n\t\t\tif  1 &lt; len(args):\n\t\t\t\tself.ModuleType = args[1]\n\t\t\tif \"ModuleType\" in kwargs:\n\t\t\t\tself.ModuleType = kwargs[\"ModuleType\"]\n\t\t\tif  2 &lt; len(args):\n\t\t\t\tself.ModuleConfig = args[2]\n\t\t\tif \"ModuleConfig\" in kwargs:\n\t\t\t\tself.ModuleConfig = kwargs[\"ModuleConfig\"]\n\t\t\tif  3 &lt; len(args):\n\t\t\t\tself.BoardRevision = args[3]\n\t\t\tif \"BoardRevision\" in kwargs:\n\t\t\t\tself.BoardRevision = kwargs[\"BoardRevision\"]\n\t\t\tif  4 &lt; len(args):\n\t\t\t\tself.CPUType = args[4]\n\t\t\tif \"CPUType\" in kwargs:\n\t\t\t\tself.CPUType = kwargs[\"CPUType\"]\n\t\t\tif  5 &lt; len(args):\n\t\t\t\tself.FWType = args[5]\n\t\t\tif \"FWType\" in kwargs:\n\t\t\t\tself.FWType = kwargs[\"FWType\"]\n\t\t\tif  6 &lt; len(args):\n\t\t\t\tself.FWVerMaj = args[6]\n\t\t\tif \"FWVerMaj\" in kwargs:\n\t\t\t\tself.FWVerMaj = kwargs[\"FWVerMaj\"]\n\t\t\tif  7 &lt; len(args):\n\t\t\t\tself.FWVerMin = args[7]\n\t\t\tif \"FWVerMin\" in kwargs:\n\t\t\t\tself.FWVerMin = kwargs[\"FWVerMin\"]\n\t\t\tif  8 &lt; len(args):\n\t\t\t\tself.Flags = args[8]\n\t\t\tif \"Flags\" in kwargs:\n\t\t\t\tself.Flags = kwargs[\"Flags\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.FWUpdBundleParams{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.FWUpdBundleParams ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef SubModule(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_SubModule_Get(self.handle)\n\t@SubModule.setter\n\tdef SubModule(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_SubModule_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_SubModule_Set(self.handle, value)\n\t@property\n\tdef ModuleType(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_ModuleType_Get(self.handle)\n\t@ModuleType.setter\n\tdef ModuleType(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_ModuleType_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_ModuleType_Set(self.handle, value)\n\t@property\n\tdef ModuleConfig(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_ModuleConfig_Get(self.handle)\n\t@ModuleConfig.setter\n\tdef ModuleConfig(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_ModuleConfig_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_ModuleConfig_Set(self.handle, value)\n\t@property\n\tdef BoardRevision(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_BoardRevision_Get(self.handle)\n\t@BoardRevision.setter\n\tdef BoardRevision(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_BoardRevision_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_BoardRevision_Set(self.handle, value)\n\t@property\n\tdef CPUType(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_CPUType_Get(self.handle)\n\t@CPUType.setter\n\tdef CPUType(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_CPUType_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_CPUType_Set(self.handle, value)\n\t@property\n\tdef FWType(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_FWType_Get(self.handle)\n\t@FWType.setter\n\tdef FWType(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_FWType_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_FWType_Set(self.handle, value)\n\t@property\n\tdef FWVerMaj(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_FWVerMaj_Get(self.handle)\n\t@FWVerMaj.setter\n\tdef FWVerMaj(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_FWVerMaj_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_FWVerMaj_Set(self.handle, value)\n\t@property\n\tdef FWVerMin(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_FWVerMin_Get(self.handle)\n\t@FWVerMin.setter\n\tdef FWVerMin(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_FWVerMin_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_FWVerMin_Set(self.handle, value)\n\t@property\n\tdef Flags(self):\n\t\treturn _pygs.consts_FWUpdBundleParams_Flags_Get(self.handle)\n\t@Flags.setter\n\tdef Flags(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_FWUpdBundleParams_Flags_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_FWUpdBundleParams_Flags_Set(self.handle, value)\n</code></pre>"},{"location":"consts.html#src.consts.FWUpdBundleParams.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/consts.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.consts_FWUpdBundleParams_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.SubModule = args[0]\n\t\tif \"SubModule\" in kwargs:\n\t\t\tself.SubModule = kwargs[\"SubModule\"]\n\t\tif  1 &lt; len(args):\n\t\t\tself.ModuleType = args[1]\n\t\tif \"ModuleType\" in kwargs:\n\t\t\tself.ModuleType = kwargs[\"ModuleType\"]\n\t\tif  2 &lt; len(args):\n\t\t\tself.ModuleConfig = args[2]\n\t\tif \"ModuleConfig\" in kwargs:\n\t\t\tself.ModuleConfig = kwargs[\"ModuleConfig\"]\n\t\tif  3 &lt; len(args):\n\t\t\tself.BoardRevision = args[3]\n\t\tif \"BoardRevision\" in kwargs:\n\t\t\tself.BoardRevision = kwargs[\"BoardRevision\"]\n\t\tif  4 &lt; len(args):\n\t\t\tself.CPUType = args[4]\n\t\tif \"CPUType\" in kwargs:\n\t\t\tself.CPUType = kwargs[\"CPUType\"]\n\t\tif  5 &lt; len(args):\n\t\t\tself.FWType = args[5]\n\t\tif \"FWType\" in kwargs:\n\t\t\tself.FWType = kwargs[\"FWType\"]\n\t\tif  6 &lt; len(args):\n\t\t\tself.FWVerMaj = args[6]\n\t\tif \"FWVerMaj\" in kwargs:\n\t\t\tself.FWVerMaj = kwargs[\"FWVerMaj\"]\n\t\tif  7 &lt; len(args):\n\t\t\tself.FWVerMin = args[7]\n\t\tif \"FWVerMin\" in kwargs:\n\t\t\tself.FWVerMin = kwargs[\"FWVerMin\"]\n\t\tif  8 &lt; len(args):\n\t\t\tself.Flags = args[8]\n\t\tif \"Flags\" in kwargs:\n\t\t\tself.Flags = kwargs[\"Flags\"]\n</code></pre>"},{"location":"consts.html#src.consts.FWUpdCmd","title":"<code>FWUpdCmd</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The type of a firmware update command.</p> Source code in <code>src/consts.py</code> <pre><code>class FWUpdCmd(Enum):\n\t\"\"\"\n\tThe type of a firmware update command.\n\n\t\"\"\"\n\tFWUpdCmd_Upload = 0\n\t\"\"\"\n\tUpload a firmware update. Can be used to upload any type of file. Triggers a response.\n\n\t\"\"\"\n\tFWUpdCmd_Status = 1\n\t\"\"\"\n\tGet the status of the firmware update. Triggers a response.\n\n\t\"\"\"\n\tFWUpdCmd_Update = 2\n\t\"\"\"\n\tExecute a firmware update for an already uploaded file. Doesn't trigger a response.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.FWUpdCmd.FWUpdCmd_Status","title":"<code>FWUpdCmd_Status = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Get the status of the firmware update. Triggers a response.</p>"},{"location":"consts.html#src.consts.FWUpdCmd.FWUpdCmd_Update","title":"<code>FWUpdCmd_Update = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Execute a firmware update for an already uploaded file. Doesn't trigger a response.</p>"},{"location":"consts.html#src.consts.FWUpdCmd.FWUpdCmd_Upload","title":"<code>FWUpdCmd_Upload = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Upload a firmware update. Can be used to upload any type of file. Triggers a response.</p>"},{"location":"consts.html#src.consts.FWUpdFlag","title":"<code>FWUpdFlag</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The flags of a firmware update.</p> Source code in <code>src/consts.py</code> <pre><code>class FWUpdFlag(Enum):\n\t\"\"\"\n\tThe flags of a firmware update.\n\n\t\"\"\"\n\tFWUpdFlag_None = 0\n\t\"\"\"\n\tNo flags.\n\n\t\"\"\"\n\tFWUpdFlag_Installed = 1\n\t\"\"\"\n\tThe firmware update is installed.\n\n\t\"\"\"\n\tFWUpdFlag_Encrypted = 2\n\t\"\"\"\n\tThe firmware update is encrypted.\n\n\t\"\"\"\n\tFWUpdFlag_Archived = 4\n\t\"\"\"\n\tThe firmware update is archived.\n\n\t\"\"\"\n\tFWUpdFlag_Healthy = 8\n\t\"\"\"\n\tThe firmware update is healthy.\n\n\t\"\"\"\n\tFWUpdFlag_Downloaded = 16\n\t\"\"\"\n\tDownloaded.\n\n\t\"\"\"\n\tFWUpdFlag_Install_Pending = 32\n\t\"\"\"\n\tThe firmware update is pending installation.\n\n\t\"\"\"\n\tFWUpdFlag_File_Safe_App = 64\n\t\"\"\"\n\tFile_Safe_App\n\n\t\"\"\"\n\tFWUpdFlag_File_Tle = 128\n\t\"\"\"\n\tThe firmware update is a TLE file.\n\n\t\"\"\"\n\tFWUpdFlag_Payload_Schedule = 256\n\t\"\"\"\n\tPayload schedule\n\n\t\"\"\"\n\tFWUpdFlag_File_Zip = 512\n\t\"\"\"\n\tA zip file.\n\n\t\"\"\"\n\tFWUpdFlag_File_Cmd = 1024\n\t\"\"\"\n\tA command file.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_Archived","title":"<code>FWUpdFlag_Archived = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The firmware update is archived.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_Downloaded","title":"<code>FWUpdFlag_Downloaded = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Downloaded.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_Encrypted","title":"<code>FWUpdFlag_Encrypted = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The firmware update is encrypted.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_File_Cmd","title":"<code>FWUpdFlag_File_Cmd = 1024</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A command file.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_File_Safe_App","title":"<code>FWUpdFlag_File_Safe_App = 64</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>File_Safe_App</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_File_Tle","title":"<code>FWUpdFlag_File_Tle = 128</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The firmware update is a TLE file.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_File_Zip","title":"<code>FWUpdFlag_File_Zip = 512</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A zip file.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_Healthy","title":"<code>FWUpdFlag_Healthy = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The firmware update is healthy.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_Install_Pending","title":"<code>FWUpdFlag_Install_Pending = 32</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The firmware update is pending installation.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_Installed","title":"<code>FWUpdFlag_Installed = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The firmware update is installed.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_None","title":"<code>FWUpdFlag_None = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>No flags.</p>"},{"location":"consts.html#src.consts.FWUpdFlag.FWUpdFlag_Payload_Schedule","title":"<code>FWUpdFlag_Payload_Schedule = 256</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Payload schedule</p>"},{"location":"consts.html#src.consts.FWUpdStatus","title":"<code>FWUpdStatus</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The status of a firmware update.</p> Source code in <code>src/consts.py</code> <pre><code>class FWUpdStatus(Enum):\n\t\"\"\"\n\tThe status of a firmware update.\n\n\t\"\"\"\n\tFWUpdStatus_NoFile = 0\n\t\"\"\"\n\tNo FW update file is present.\n\n\t\"\"\"\n\tFWUpdStatus_Pending = 1\n\t\"\"\"\n\tA FW update is being executed.\n\n\t\"\"\"\n\tFWUpdStatus_Invalid = 2\n\t\"\"\"\n\tThe FW update file is invalid.\n\n\t\"\"\"\n\tFWUpdStatus_Completed = 3\n\t\"\"\"\n\tThe FW update has completed.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.FWUpdStatus.FWUpdStatus_Completed","title":"<code>FWUpdStatus_Completed = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The FW update has completed.</p>"},{"location":"consts.html#src.consts.FWUpdStatus.FWUpdStatus_Invalid","title":"<code>FWUpdStatus_Invalid = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The FW update file is invalid.</p>"},{"location":"consts.html#src.consts.FWUpdStatus.FWUpdStatus_NoFile","title":"<code>FWUpdStatus_NoFile = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>No FW update file is present.</p>"},{"location":"consts.html#src.consts.FWUpdStatus.FWUpdStatus_Pending","title":"<code>FWUpdStatus_Pending = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A FW update is being executed.</p>"},{"location":"consts.html#src.consts.GnurProtoId","title":"<code>GnurProtoId</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The type of a GNUR protocol ID.</p> Source code in <code>src/consts.py</code> <pre><code>class GnurProtoId(Enum):\n\t\"\"\"\n\tThe type of a GNUR protocol ID.\n\n\t\"\"\"\n\tGnurProtoId_None = 0\n\t\"\"\"\n\tA default value for a GNUR protocol ID.\n\n\t\"\"\"\n\tGnurProtoId_ChangeRadioFreq = 1\n\t\"\"\"\n\tChange the radio frequency.\n\n\t\"\"\"\n\tGnurProtoId_SendAmacFrame = 2\n\t\"\"\"\n\tSend an actual AirMac frame.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.GnurProtoId.GnurProtoId_ChangeRadioFreq","title":"<code>GnurProtoId_ChangeRadioFreq = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change the radio frequency.</p>"},{"location":"consts.html#src.consts.GnurProtoId.GnurProtoId_None","title":"<code>GnurProtoId_None = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A default value for a GNUR protocol ID.</p>"},{"location":"consts.html#src.consts.GnurProtoId.GnurProtoId_SendAmacFrame","title":"<code>GnurProtoId_SendAmacFrame = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Send an actual AirMac frame.</p>"},{"location":"consts.html#src.consts.MacGWIntf","title":"<code>MacGWIntf</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The MAC gateway protocol specific interface.</p> Source code in <code>src/consts.py</code> <pre><code>class MacGWIntf(Enum):\n\t\"\"\"\n\tThe MAC gateway protocol specific interface.\n\n\t\"\"\"\n\tMacGWIntf_Sys_Pri = 0\n\t\"\"\"\n\tPrimary interface.\n\n\t\"\"\"\n\tMacGWIntf_Sys_Sec = 1\n\t\"\"\"\n\tSecondary interface.\n\n\t\"\"\"\n\tMacGWIntf_Pay_Pri = 2\n\t\"\"\"\n\tPayload primary interface.\n\n\t\"\"\"\n\tMacGWIntf_Pay_sec = 3\n\t\"\"\"\n\tPayload secondary interface.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.MacGWIntf.MacGWIntf_Pay_Pri","title":"<code>MacGWIntf_Pay_Pri = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Payload primary interface.</p>"},{"location":"consts.html#src.consts.MacGWIntf.MacGWIntf_Pay_sec","title":"<code>MacGWIntf_Pay_sec = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Payload secondary interface.</p>"},{"location":"consts.html#src.consts.MacGWIntf.MacGWIntf_Sys_Pri","title":"<code>MacGWIntf_Sys_Pri = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Primary interface.</p>"},{"location":"consts.html#src.consts.MacGWIntf.MacGWIntf_Sys_Sec","title":"<code>MacGWIntf_Sys_Sec = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Secondary interface.</p>"},{"location":"consts.html#src.consts.MacPrio","title":"<code>MacPrio</code>","text":"<p>             Bases: <code>Enum</code></p> Source code in <code>src/consts.py</code> <pre><code>class MacPrio(Enum):\n\tMacPrio_Critical = 1\n\tMacPrio_TQ = 1\n\t\"\"\"\n\tTime quantum - the time it takes to transmit 18 bits (if the speed is 50 000 bps, T q = 360 \u00b5s)\n\n\t\"\"\"\n\tMacPrio_High = 3\n\tMacPrio_TQSpan = 6\n\t\"\"\"\n\tKeep those in TQ and at least 2 between them\n\tAnd not below 1, since inter byte delay may fool some node to start transmitting in middle of message\n\n\t\"\"\"\n\tMacPrio_Normal = 7\n\tMacPrio_Low = 13\n</code></pre>"},{"location":"consts.html#src.consts.MacPrio.MacPrio_TQ","title":"<code>MacPrio_TQ = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time quantum - the time it takes to transmit 18 bits (if the speed is 50 000 bps, T q = 360 \u00b5s)</p>"},{"location":"consts.html#src.consts.MacPrio.MacPrio_TQSpan","title":"<code>MacPrio_TQSpan = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Keep those in TQ and at least 2 between them And not below 1, since inter byte delay may fool some node to start transmitting in middle of message</p>"},{"location":"consts.html#src.consts.MacProtoId","title":"<code>MacProtoId</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The higher level protocol, which the Mac protocol encapsulates.</p> Source code in <code>src/consts.py</code> <pre><code>class MacProtoId(Enum):\n\t\"\"\"\n\tThe higher level protocol, which the Mac protocol encapsulates.\n\n\t\"\"\"\n\tMacProtoId_None = 0\n\t\"\"\"\n\tUsed to ignore the protocol ID.\n\n\t\"\"\"\n\tMacProtoId_FWUpd = 2\n\t\"\"\"\n\tESPS FW update protocol.\n\n\t\"\"\"\n\tMacProtoId_NetDebug = 3\n\t\"\"\"\n\tNetDebug.\n\n\t\"\"\"\n\tMacProtoId_Diagnostics = 4\n\t\"\"\"\n\tDiagnostics.\n\n\t\"\"\"\n\tMacProtoId_UHF = 5\n\t\"\"\"\n\tUHF.\n\n\t\"\"\"\n\tMacProtoId_LED = 6\n\t\"\"\"\n\tLED test.\n\n\t\"\"\"\n\tMacProtoId_Debug = 7\n\t\"\"\"\n\tDebug.\n\n\t\"\"\"\n\tMacProtoId_EPSI = 10\n\t\"\"\"\n\tEPSI\n\n\t\"\"\"\n\tMacProtoId_TP = 11\n\t\"\"\"\n\tESPS TP transport protocol.\n\n\t\"\"\"\n\tMacProtoId_FP = 12\n\t\"\"\"\n\tESPS FP protocol.\n\n\t\"\"\"\n\tMacProtoId_Service = 13\n\t\"\"\"\n\tESPS Service protocol.\n\n\t\"\"\"\n\tMacProtoId_MACTest = 255\n\t\"\"\"\n\tMAC test.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_Debug","title":"<code>MacProtoId_Debug = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Debug.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_Diagnostics","title":"<code>MacProtoId_Diagnostics = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Diagnostics.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_EPSI","title":"<code>MacProtoId_EPSI = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EPSI</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_FP","title":"<code>MacProtoId_FP = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ESPS FP protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_FWUpd","title":"<code>MacProtoId_FWUpd = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ESPS FW update protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_LED","title":"<code>MacProtoId_LED = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>LED test.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_MACTest","title":"<code>MacProtoId_MACTest = 255</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MAC test.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_NetDebug","title":"<code>MacProtoId_NetDebug = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>NetDebug.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_None","title":"<code>MacProtoId_None = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Used to ignore the protocol ID.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_Service","title":"<code>MacProtoId_Service = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ESPS Service protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_TP","title":"<code>MacProtoId_TP = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ESPS TP transport protocol.</p>"},{"location":"consts.html#src.consts.MacProtoId.MacProtoId_UHF","title":"<code>MacProtoId_UHF = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>UHF.</p>"},{"location":"consts.html#src.consts.Map_uint8_error","title":"<code>Map_uint8_error</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/consts.py</code> <pre><code>class Map_uint8_error(go.GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Map_uint8_error_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Mapping):\n\t\t\t\t\traise TypeError('Map_uint8_error.__init__ takes a mapping as argument')\n\t\t\t\tfor k, v in args[0].items():\n\t\t\t\t\t_pygs.Map_uint8_error_set(self.handle, k, v)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'pygs.Map_uint8_error len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'\n\t\tif len(self) &lt; 120:\n\t\t\tfor k, v in self.items():\n\t\t\t\ts += str(k) + '=' + str(v) + ', '\n\t\treturn s + '}'\n\tdef __repr__(self):\n\t\ts = 'pygs.Map_uint8_error({'\n\t\tfor k, v in self.items():\n\t\t\ts += str(k) + '=' + str(v) + ', '\n\t\treturn s + '})'\n\tdef __len__(self):\n\t\treturn _pygs.Map_uint8_error_len(self.handle)\n\tdef __getitem__(self, key):\n\t\treturn _pygs.Map_uint8_error_elem(self.handle, key)\n\tdef __setitem__(self, key, value):\n\t\t_pygs.Map_uint8_error_set(self.handle, key, value)\n\tdef __delitem__(self, key):\n\t\treturn _pygs.Map_uint8_error_delete(self.handle, key)\n\tdef keys(self):\n\t\treturn go.Slice_uint8(handle=_pygs.Map_uint8_error_keys(self.handle))\n\tdef values(self):\n\t\tvls = []\n\t\tkys = self.keys()\n\t\tfor k in kys:\n\t\t\tvls.append(self[k])\n\t\treturn vls\n\tdef items(self):\n\t\tvls = []\n\t\tkys = self.keys()\n\t\tfor k in kys:\n\t\t\tvls.append((k, self[k]))\n\t\treturn vls\n\tdef __iter__(self):\n\t\treturn iter(self.items())\n\tdef __contains__(self, key):\n\t\treturn _pygs.Map_uint8_error_contains(self.handle, key)\n</code></pre>"},{"location":"consts.html#src.consts.Map_uint8_error.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/consts.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Map_uint8_error_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Mapping):\n\t\t\t\traise TypeError('Map_uint8_error.__init__ takes a mapping as argument')\n\t\t\tfor k, v in args[0].items():\n\t\t\t\t_pygs.Map_uint8_error_set(self.handle, k, v)\n</code></pre>"},{"location":"consts.html#src.consts.ModuleTypeId","title":"<code>ModuleTypeId</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The type of a module.</p> Source code in <code>src/consts.py</code> <pre><code>class ModuleTypeId(Enum):\n\t\"\"\"\n\tThe type of a module.\n\n\t\"\"\"\n\tModuleTypeId_Unknown = 0\n\t\"\"\"\n\tA default value for a module type ID.\n\n\t\"\"\"\n\tModuleTypeId_MSPMacGatewayDev = 1\n\t\"\"\"\n\tMSP MAC gateway device module.\n\n\t\"\"\"\n\tModuleTypeId_EPSII_PDM = 2\n\t\"\"\"\n\tEPS II PDM module.\n\n\t\"\"\"\n\tModuleTypeId_EPSII_BP = 3\n\t\"\"\"\n\tEPS II BP module.\n\n\t\"\"\"\n\tModuleTypeId_EPSII_BPL = 4\n\t\"\"\"\n\tEPS II BPL module.\n\n\t\"\"\"\n\tModuleTypeId_OBC1016 = 5\n\t\"\"\"\n\tOBC 1016 module.\n\n\t\"\"\"\n\tModuleTypeId_OBC2 = 6\n\t\"\"\"\n\tOBC 2 module.\n\n\t\"\"\"\n\tModuleTypeId_UHF2 = 7\n\t\"\"\"\n\tUHF 2 module.\n\n\t\"\"\"\n\tModuleTypeId_EPS_I = 8\n\t\"\"\"\n\tEPS I module.\n\n\t\"\"\"\n\tModuleTypeId_SBAND_TMTC = 9\n\t\"\"\"\n\tS-band TMTC module.\n\n\t\"\"\"\n\tModuleTypeId_MAX = 10\n</code></pre>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_EPSII_BP","title":"<code>ModuleTypeId_EPSII_BP = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EPS II BP module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_EPSII_BPL","title":"<code>ModuleTypeId_EPSII_BPL = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EPS II BPL module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_EPSII_PDM","title":"<code>ModuleTypeId_EPSII_PDM = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EPS II PDM module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_EPS_I","title":"<code>ModuleTypeId_EPS_I = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EPS I module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_MSPMacGatewayDev","title":"<code>ModuleTypeId_MSPMacGatewayDev = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MSP MAC gateway device module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_OBC1016","title":"<code>ModuleTypeId_OBC1016 = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>OBC 1016 module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_OBC2","title":"<code>ModuleTypeId_OBC2 = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>OBC 2 module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_SBAND_TMTC","title":"<code>ModuleTypeId_SBAND_TMTC = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>S-band TMTC module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_UHF2","title":"<code>ModuleTypeId_UHF2 = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>UHF 2 module.</p>"},{"location":"consts.html#src.consts.ModuleTypeId.ModuleTypeId_Unknown","title":"<code>ModuleTypeId_Unknown = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A default value for a module type ID.</p>"},{"location":"consts.html#src.consts.RFConfig","title":"<code>RFConfig</code>","text":"<p>             Bases: <code>RFConfigHeader</code></p> <p>RFConfig protocol for configuring a ground station radio</p> Source code in <code>src/consts.py</code> <pre><code>class RFConfig(RFConfigHeader):\n\t\"\"\"RFConfig protocol for configuring a ground station radio\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.consts_RFConfig_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  1 &lt; len(args):\n\t\t\t\tself.AESKey = args[1]\n\t\t\tif \"AESKey\" in kwargs:\n\t\t\t\tself.AESKey = kwargs[\"AESKey\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.RFConfig{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.RFConfig ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef AESKey(self):\n\t\treturn go.Slice_byte(handle=_pygs.consts_RFConfig_AESKey_Get(self.handle))\n\t@AESKey.setter\n\tdef AESKey(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfig_AESKey_Set(self.handle, value.handle)\n\t\telse:\n\t\t\traise TypeError(\"supplied argument type {t} is not a go.GoClass\".format(t=type(value)))\n\tdef Ser(self):\n\t\t\"\"\"Ser() []int\n\n\t\tSerialize a RFConfig packet to write to esrfcfg connection for initializing the radio.\n\t\t\"\"\"\n\t\treturn go.Slice_byte(handle=_pygs.consts_RFConfig_Ser(self.handle))\n</code></pre>"},{"location":"consts.html#src.consts.RFConfig.Ser","title":"<code>Ser()</code>","text":"<p>Ser() []int</p> <p>Serialize a RFConfig packet to write to esrfcfg connection for initializing the radio.</p> Source code in <code>src/consts.py</code> <pre><code>def Ser(self):\n\t\"\"\"Ser() []int\n\n\tSerialize a RFConfig packet to write to esrfcfg connection for initializing the radio.\n\t\"\"\"\n\treturn go.Slice_byte(handle=_pygs.consts_RFConfig_Ser(self.handle))\n</code></pre>"},{"location":"consts.html#src.consts.RFConfig.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/consts.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.consts_RFConfig_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  1 &lt; len(args):\n\t\t\tself.AESKey = args[1]\n\t\tif \"AESKey\" in kwargs:\n\t\t\tself.AESKey = kwargs[\"AESKey\"]\n</code></pre>"},{"location":"consts.html#src.consts.RFConfigHeader","title":"<code>RFConfigHeader</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>RFConfig protocol header</p> Source code in <code>src/consts.py</code> <pre><code>class RFConfigHeader(go.GoClass):\n\t\"\"\"RFConfig protocol header\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.consts_RFConfigHeader_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.Type = args[0]\n\t\t\tif \"Type\" in kwargs:\n\t\t\t\tself.Type = kwargs[\"Type\"]\n\t\t\tif  1 &lt; len(args):\n\t\t\t\tself.DownlinkFreq = args[1]\n\t\t\tif \"DownlinkFreq\" in kwargs:\n\t\t\t\tself.DownlinkFreq = kwargs[\"DownlinkFreq\"]\n\t\t\tif  2 &lt; len(args):\n\t\t\t\tself.UplinkFreq = args[2]\n\t\t\tif \"UplinkFreq\" in kwargs:\n\t\t\t\tself.UplinkFreq = kwargs[\"UplinkFreq\"]\n\t\t\tif  3 &lt; len(args):\n\t\t\t\tself.RFMode = args[3]\n\t\t\tif \"RFMode\" in kwargs:\n\t\t\t\tself.RFMode = kwargs[\"RFMode\"]\n\t\t\tif  4 &lt; len(args):\n\t\t\t\tself.RadioMode = args[4]\n\t\t\tif \"RadioMode\" in kwargs:\n\t\t\t\tself.RadioMode = kwargs[\"RadioMode\"]\n\t\t\tif  5 &lt; len(args):\n\t\t\t\tself.IsIntFrac = args[5]\n\t\t\tif \"IsIntFrac\" in kwargs:\n\t\t\t\tself.IsIntFrac = kwargs[\"IsIntFrac\"]\n\t\t\tif  6 &lt; len(args):\n\t\t\t\tself.AESKeySize = args[6]\n\t\t\tif \"AESKeySize\" in kwargs:\n\t\t\t\tself.AESKeySize = kwargs[\"AESKeySize\"]\n\t\t\tif  7 &lt; len(args):\n\t\t\t\tself.Encrypted = args[7]\n\t\t\tif \"Encrypted\" in kwargs:\n\t\t\t\tself.Encrypted = kwargs[\"Encrypted\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.RFConfigHeader{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.RFConfigHeader ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef Type(self):\n\t\treturn _pygs.consts_RFConfigHeader_Type_Get(self.handle)\n\t@Type.setter\n\tdef Type(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_Type_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_Type_Set(self.handle, value)\n\t@property\n\tdef DownlinkFreq(self):\n\t\treturn _pygs.consts_RFConfigHeader_DownlinkFreq_Get(self.handle)\n\t@DownlinkFreq.setter\n\tdef DownlinkFreq(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_DownlinkFreq_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_DownlinkFreq_Set(self.handle, value)\n\t@property\n\tdef UplinkFreq(self):\n\t\treturn _pygs.consts_RFConfigHeader_UplinkFreq_Get(self.handle)\n\t@UplinkFreq.setter\n\tdef UplinkFreq(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_UplinkFreq_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_UplinkFreq_Set(self.handle, value)\n\t@property\n\tdef RFMode(self):\n\t\treturn _pygs.consts_RFConfigHeader_RFMode_Get(self.handle)\n\t@RFMode.setter\n\tdef RFMode(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_RFMode_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_RFMode_Set(self.handle, value)\n\t@property\n\tdef RadioMode(self):\n\t\treturn _pygs.consts_RFConfigHeader_RadioMode_Get(self.handle)\n\t@RadioMode.setter\n\tdef RadioMode(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_RadioMode_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_RadioMode_Set(self.handle, value)\n\t@property\n\tdef IsIntFrac(self):\n\t\treturn _pygs.consts_RFConfigHeader_IsIntFrac_Get(self.handle)\n\t@IsIntFrac.setter\n\tdef IsIntFrac(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_IsIntFrac_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_IsIntFrac_Set(self.handle, value)\n\t@property\n\tdef AESKeySize(self):\n\t\treturn _pygs.consts_RFConfigHeader_AESKeySize_Get(self.handle)\n\t@AESKeySize.setter\n\tdef AESKeySize(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_AESKeySize_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_AESKeySize_Set(self.handle, value)\n\t@property\n\tdef Encrypted(self):\n\t\treturn _pygs.consts_RFConfigHeader_Encrypted_Get(self.handle)\n\t@Encrypted.setter\n\tdef Encrypted(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RFConfigHeader_Encrypted_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RFConfigHeader_Encrypted_Set(self.handle, value)\n</code></pre>"},{"location":"consts.html#src.consts.RFConfigHeader.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/consts.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.consts_RFConfigHeader_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.Type = args[0]\n\t\tif \"Type\" in kwargs:\n\t\t\tself.Type = kwargs[\"Type\"]\n\t\tif  1 &lt; len(args):\n\t\t\tself.DownlinkFreq = args[1]\n\t\tif \"DownlinkFreq\" in kwargs:\n\t\t\tself.DownlinkFreq = kwargs[\"DownlinkFreq\"]\n\t\tif  2 &lt; len(args):\n\t\t\tself.UplinkFreq = args[2]\n\t\tif \"UplinkFreq\" in kwargs:\n\t\t\tself.UplinkFreq = kwargs[\"UplinkFreq\"]\n\t\tif  3 &lt; len(args):\n\t\t\tself.RFMode = args[3]\n\t\tif \"RFMode\" in kwargs:\n\t\t\tself.RFMode = kwargs[\"RFMode\"]\n\t\tif  4 &lt; len(args):\n\t\t\tself.RadioMode = args[4]\n\t\tif \"RadioMode\" in kwargs:\n\t\t\tself.RadioMode = kwargs[\"RadioMode\"]\n\t\tif  5 &lt; len(args):\n\t\t\tself.IsIntFrac = args[5]\n\t\tif \"IsIntFrac\" in kwargs:\n\t\t\tself.IsIntFrac = kwargs[\"IsIntFrac\"]\n\t\tif  6 &lt; len(args):\n\t\t\tself.AESKeySize = args[6]\n\t\tif \"AESKeySize\" in kwargs:\n\t\t\tself.AESKeySize = kwargs[\"AESKeySize\"]\n\t\tif  7 &lt; len(args):\n\t\t\tself.Encrypted = args[7]\n\t\tif \"Encrypted\" in kwargs:\n\t\t\tself.Encrypted = kwargs[\"Encrypted\"]\n</code></pre>"},{"location":"consts.html#src.consts.RFConfigMode","title":"<code>RFConfigMode</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RFConfig GFSK/GMSK mode, defining the baud rate and the frequency deviation.</p> Source code in <code>src/consts.py</code> <pre><code>class RFConfigMode(Enum):\n\t\"\"\"\n\tRFConfig GFSK/GMSK mode, defining the baud rate and the frequency deviation.\n\n\t\"\"\"\n\tRFConfigMode_1200_600 = 0\n\t\"\"\"\n\t1200 baud, 600 kHz deviation.\n\n\t\"\"\"\n\tRFConfigMode_2400_600 = 1\n\t\"\"\"\n\t2400 baud, 600 kHz deviation.\n\n\t\"\"\"\n\tRFConfigMode_4800_1200 = 2\n\t\"\"\"\n\t4800 baud, 1200 kHz deviation.\n\n\t\"\"\"\n\tRFConfigMode_9600_2400 = 3\n\t\"\"\"\n\t9600 baud, 2400 kHz deviation.\n\n\t\"\"\"\n\tRFConfigMode_9600_4800 = 4\n\t\"\"\"\n\t9600 baud, 4800 kHz deviation.\n\n\t\"\"\"\n\tRFConfigMode_19200_4800 = 5\n\t\"\"\"\n\t19200 baud, 4800 kHz deviation.\n\n\t\"\"\"\n\tRFConfigMode_19200_9600 = 6\n\t\"\"\"\n\t19200 baud, 9600 kHz deviation.\n\n\t\"\"\"\n\tRFConfigMode_19200_19200 = 7\n\t\"\"\"\n\t19200 baud, 19200 kHz deviation.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_1200_600","title":"<code>RFConfigMode_1200_600 = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>1200 baud, 600 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_19200_19200","title":"<code>RFConfigMode_19200_19200 = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>19200 baud, 19200 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_19200_4800","title":"<code>RFConfigMode_19200_4800 = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>19200 baud, 4800 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_19200_9600","title":"<code>RFConfigMode_19200_9600 = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>19200 baud, 9600 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_2400_600","title":"<code>RFConfigMode_2400_600 = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>2400 baud, 600 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_4800_1200","title":"<code>RFConfigMode_4800_1200 = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>4800 baud, 1200 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_9600_2400","title":"<code>RFConfigMode_9600_2400 = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>9600 baud, 2400 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigMode.RFConfigMode_9600_4800","title":"<code>RFConfigMode_9600_4800 = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>9600 baud, 4800 kHz deviation.</p>"},{"location":"consts.html#src.consts.RFConfigRadioMode","title":"<code>RFConfigRadioMode</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The radio mode.</p> Source code in <code>src/consts.py</code> <pre><code>class RFConfigRadioMode(Enum):\n\t\"\"\"\n\tThe radio mode.\n\n\t\"\"\"\n\tRFConfigRadioMode_Sleep = 0\n\t\"\"\"\n\tThe radio is in sleep mode.\n\n\t\"\"\"\n\tRFConfigRadioMode_TX = 1\n\t\"\"\"\n\tThe radio is in transmit mode.\n\n\t\"\"\"\n\tRFConfigRadioMode_RX = 2\n\t\"\"\"\n\tThe radio is in receive mode.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.RFConfigRadioMode.RFConfigRadioMode_RX","title":"<code>RFConfigRadioMode_RX = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The radio is in receive mode.</p>"},{"location":"consts.html#src.consts.RFConfigRadioMode.RFConfigRadioMode_Sleep","title":"<code>RFConfigRadioMode_Sleep = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The radio is in sleep mode.</p>"},{"location":"consts.html#src.consts.RFConfigRadioMode.RFConfigRadioMode_TX","title":"<code>RFConfigRadioMode_TX = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The radio is in transmit mode.</p>"},{"location":"consts.html#src.consts.RFConfigType","title":"<code>RFConfigType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RFConfig protocol type</p> Source code in <code>src/consts.py</code> <pre><code>class RFConfigType(Enum):\n\t\"\"\"\n\tRFConfig protocol type\n\n\t\"\"\"\n\tRFConfigType_Init = 1\n\t\"\"\"\n\tInitialize radio and sets uplink, downlink frequencies, RF config and radio mode.\n\n\t\"\"\"\n\tRFConfigType_ChangeUHFFreq = 2\n\t\"\"\"\n\tChange uplink, downlink frequencies and RF config.\n\n\t\"\"\"\n\tRFConfigType_ChangeRadioMode = 3\n\t\"\"\"\n\tChange radio mode.\n\n\t\"\"\"\n\tRFConfigType_ChangeAESKey = 4\n\t\"\"\"\n\tChange AES key.\n\n\t\"\"\"\n\tRFConfigType_ChangeFreq = 5\n\t\"\"\"\n\tChange radio frequency.\n\n\t\"\"\"\n\tRFConfigType_End = 6\n</code></pre>"},{"location":"consts.html#src.consts.RFConfigType.RFConfigType_ChangeAESKey","title":"<code>RFConfigType_ChangeAESKey = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change AES key.</p>"},{"location":"consts.html#src.consts.RFConfigType.RFConfigType_ChangeFreq","title":"<code>RFConfigType_ChangeFreq = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change radio frequency.</p>"},{"location":"consts.html#src.consts.RFConfigType.RFConfigType_ChangeRadioMode","title":"<code>RFConfigType_ChangeRadioMode = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change radio mode.</p>"},{"location":"consts.html#src.consts.RFConfigType.RFConfigType_ChangeUHFFreq","title":"<code>RFConfigType_ChangeUHFFreq = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change uplink, downlink frequencies and RF config.</p>"},{"location":"consts.html#src.consts.RFConfigType.RFConfigType_Init","title":"<code>RFConfigType_Init = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Initialize radio and sets uplink, downlink frequencies, RF config and radio mode.</p>"},{"location":"consts.html#src.consts.RotatorPosition","title":"<code>RotatorPosition</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Position represents the azimuth and elevation of a rotator.</p> Source code in <code>src/consts.py</code> <pre><code>class RotatorPosition(go.GoClass):\n\t\"\"\"Position represents the azimuth and elevation of a rotator.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.consts_RotatorPosition_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.Azimuth = args[0]\n\t\t\tif \"Azimuth\" in kwargs:\n\t\t\t\tself.Azimuth = kwargs[\"Azimuth\"]\n\t\t\tif  1 &lt; len(args):\n\t\t\t\tself.Elevation = args[1]\n\t\t\tif \"Elevation\" in kwargs:\n\t\t\t\tself.Elevation = kwargs[\"Elevation\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.RotatorPosition{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'consts.RotatorPosition ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef Azimuth(self):\n\t\treturn _pygs.consts_RotatorPosition_Azimuth_Get(self.handle)\n\t@Azimuth.setter\n\tdef Azimuth(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RotatorPosition_Azimuth_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RotatorPosition_Azimuth_Set(self.handle, value)\n\t@property\n\tdef Elevation(self):\n\t\treturn _pygs.consts_RotatorPosition_Elevation_Get(self.handle)\n\t@Elevation.setter\n\tdef Elevation(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.consts_RotatorPosition_Elevation_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.consts_RotatorPosition_Elevation_Set(self.handle, value)\n</code></pre>"},{"location":"consts.html#src.consts.RotatorPosition.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/consts.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.consts_RotatorPosition_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.Azimuth = args[0]\n\t\tif \"Azimuth\" in kwargs:\n\t\t\tself.Azimuth = kwargs[\"Azimuth\"]\n\t\tif  1 &lt; len(args):\n\t\t\tself.Elevation = args[1]\n\t\tif \"Elevation\" in kwargs:\n\t\t\tself.Elevation = kwargs[\"Elevation\"]\n</code></pre>"},{"location":"consts.html#src.consts.SubModuleId","title":"<code>SubModuleId</code>","text":"<p>             Bases: <code>Enum</code></p> <p>FW update sub-module IDs.</p> Source code in <code>src/consts.py</code> <pre><code>class SubModuleId(Enum):\n\t\"\"\"\n\tFW update sub-module IDs.\n\n\t\"\"\"\n\tSubModuleId_ModuleFWUpd = 0\n\t\"\"\"\n\tPerform a FW update of an ES module.\n\n\t\"\"\"\n\tSubModuleId_PayloadFWUpd = 1\n\t\"\"\"\n\tPerform a FW update, targeted to a payload computer.\n\n\t\"\"\"\n\tSubModuleId_FileUpload = 2\n\t\"\"\"\n\tFWUpd is used to simply upload a file if the module supports it.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.SubModuleId.SubModuleId_FileUpload","title":"<code>SubModuleId_FileUpload = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>FWUpd is used to simply upload a file if the module supports it.</p>"},{"location":"consts.html#src.consts.SubModuleId.SubModuleId_ModuleFWUpd","title":"<code>SubModuleId_ModuleFWUpd = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Perform a FW update of an ES module.</p>"},{"location":"consts.html#src.consts.SubModuleId.SubModuleId_PayloadFWUpd","title":"<code>SubModuleId_PayloadFWUpd = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Perform a FW update, targeted to a payload computer.</p>"},{"location":"consts.html#src.consts.TPProtoId","title":"<code>TPProtoId</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The higher level protocol, which the TP protocol encapsulates.</p> Source code in <code>src/consts.py</code> <pre><code>class TPProtoId(Enum):\n\t\"\"\"\n\tThe higher level protocol, which the TP protocol encapsulates.\n\n\t\"\"\"\n\tTPProtoId_CP = 10\n\t\"\"\"\n\tThe encapsulated data is a CP command.\n\n\t\"\"\"\n\tTPProtoId_FWUpd = 14\n\t\"\"\"\n\tThe encapsulated data is a firmware update.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.TPProtoId.TPProtoId_CP","title":"<code>TPProtoId_CP = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The encapsulated data is a CP command.</p>"},{"location":"consts.html#src.consts.TPProtoId.TPProtoId_FWUpd","title":"<code>TPProtoId_FWUpd = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The encapsulated data is a firmware update.</p>"},{"location":"consts.html#src.consts.UhfGWCmd","title":"<code>UhfGWCmd</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The type of a UHF GW command.</p> Source code in <code>src/consts.py</code> <pre><code>class UhfGWCmd(Enum):\n\t\"\"\"\n\tThe type of a UHF GW command.\n\n\t\"\"\"\n\tUhfGWCmd_None = 0\n\t\"\"\"\n\tA default value for a UHF GW command.\n\n\t\"\"\"\n\tUhfGWCmd_TunOut = 1\n\t\"\"\"\n\tSend an outbound frame.\n\n\t\"\"\"\n\tUhfGWCmd_TunIn = 2\n\t\"\"\"\n\tReceive an inbound frame.\n\n\t\"\"\"\n\tUhfGWCmd_AsyncErr = 3\n\t\"\"\"\n\tAn asynchronous error.\n\n\t\"\"\"\n\tUhfGWCmd_InitRadio = 4\n\t\"\"\"\n\tInitialize the radio.\n\n\t\"\"\"\n\tUhfGWCmd_ChangeRadioMode = 5\n\t\"\"\"\n\tChange the radio mode.\n\n\t\"\"\"\n\tUhfGWCmd_TunInAx25 = 6\n\t\"\"\"\n\tAn AX.25 beacon.\n\n\t\"\"\"\n\tUhfGWCmd_ChangeRadioFreq = 7\n\t\"\"\"\n\tChange the radio frequency.\n\n\t\"\"\"\n\tUhfGWCmd_ChangeAESKey = 8\n\t\"\"\"\n\tChange the AES key.\n\n\t\"\"\"\n</code></pre>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_AsyncErr","title":"<code>UhfGWCmd_AsyncErr = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An asynchronous error.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_ChangeAESKey","title":"<code>UhfGWCmd_ChangeAESKey = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change the AES key.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_ChangeRadioFreq","title":"<code>UhfGWCmd_ChangeRadioFreq = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change the radio frequency.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_ChangeRadioMode","title":"<code>UhfGWCmd_ChangeRadioMode = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Change the radio mode.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_InitRadio","title":"<code>UhfGWCmd_InitRadio = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Initialize the radio.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_None","title":"<code>UhfGWCmd_None = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A default value for a UHF GW command.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_TunIn","title":"<code>UhfGWCmd_TunIn = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Receive an inbound frame.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_TunInAx25","title":"<code>UhfGWCmd_TunInAx25 = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An AX.25 beacon.</p>"},{"location":"consts.html#src.consts.UhfGWCmd.UhfGWCmd_TunOut","title":"<code>UhfGWCmd_TunOut = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Send an outbound frame.</p>"},{"location":"consts.html#src.consts.FwUpdError","title":"<code>FwUpdError()</code>","text":"<p>FwUpdError Gets Go Variable: consts.FwUpdError A map of FW update errors.</p> Source code in <code>src/consts.py</code> <pre><code>def FwUpdError():\n\t\"\"\"\n\tFwUpdError Gets Go Variable: consts.FwUpdError\n\tA map of FW update errors.\n\n\t\"\"\"\n\treturn Map_uint8_error(handle=_pygs.consts_FwUpdError())\n</code></pre>"},{"location":"consts.html#src.consts.FwUpdStatus","title":"<code>FwUpdStatus()</code>","text":"<p>FwUpdStatus Gets Go Variable: consts.FwUpdStatus A map of FW update status errors.</p> Source code in <code>src/consts.py</code> <pre><code>def FwUpdStatus():\n\t\"\"\"\n\tFwUpdStatus Gets Go Variable: consts.FwUpdStatus\n\tA map of FW update status errors.\n\n\t\"\"\"\n\treturn Map_uint8_error(handle=_pygs.consts_FwUpdStatus())\n</code></pre>"},{"location":"consts.html#src.consts.MacGWResErr","title":"<code>MacGWResErr()</code>","text":"<p>MacGWResErr Gets Go Variable: consts.MacGWResErr A map of MAC gateway errors.</p> Source code in <code>src/consts.py</code> <pre><code>def MacGWResErr():\n\t\"\"\"\n\tMacGWResErr Gets Go Variable: consts.MacGWResErr\n\tA map of MAC gateway errors.\n\n\t\"\"\"\n\treturn Map_uint8_error(handle=_pygs.consts_MacGWResErr())\n</code></pre>"},{"location":"consts.html#src.consts.Set_FwUpdError","title":"<code>Set_FwUpdError(value)</code>","text":"<p>Set_FwUpdError Sets Go Variable: consts.FwUpdError A map of FW update errors.</p> Source code in <code>src/consts.py</code> <pre><code>def Set_FwUpdError(value):\n\t\"\"\"\n\tSet_FwUpdError Sets Go Variable: consts.FwUpdError\n\tA map of FW update errors.\n\n\t\"\"\"\n\tif isinstance(value, go.GoClass):\n\t\t_pygs.consts_Set_FwUpdError(value.handle)\n\telse:\n\t\t_pygs.consts_Set_FwUpdError(value)\n</code></pre>"},{"location":"consts.html#src.consts.Set_FwUpdStatus","title":"<code>Set_FwUpdStatus(value)</code>","text":"<p>Set_FwUpdStatus Sets Go Variable: consts.FwUpdStatus A map of FW update status errors.</p> Source code in <code>src/consts.py</code> <pre><code>def Set_FwUpdStatus(value):\n\t\"\"\"\n\tSet_FwUpdStatus Sets Go Variable: consts.FwUpdStatus\n\tA map of FW update status errors.\n\n\t\"\"\"\n\tif isinstance(value, go.GoClass):\n\t\t_pygs.consts_Set_FwUpdStatus(value.handle)\n\telse:\n\t\t_pygs.consts_Set_FwUpdStatus(value)\n</code></pre>"},{"location":"consts.html#src.consts.Set_MacGWResErr","title":"<code>Set_MacGWResErr(value)</code>","text":"<p>Set_MacGWResErr Sets Go Variable: consts.MacGWResErr A map of MAC gateway errors.</p> Source code in <code>src/consts.py</code> <pre><code>def Set_MacGWResErr(value):\n\t\"\"\"\n\tSet_MacGWResErr Sets Go Variable: consts.MacGWResErr\n\tA map of MAC gateway errors.\n\n\t\"\"\"\n\tif isinstance(value, go.GoClass):\n\t\t_pygs.consts_Set_MacGWResErr(value.handle)\n\telse:\n\t\t_pygs.consts_Set_MacGWResErr(value)\n</code></pre>"},{"location":"consts.html#src.consts.Set_TPError","title":"<code>Set_TPError(value)</code>","text":"<p>Set_TPError Sets Go Variable: consts.TPError A map of TP errors.</p> Source code in <code>src/consts.py</code> <pre><code>def Set_TPError(value):\n\t\"\"\"\n\tSet_TPError Sets Go Variable: consts.TPError\n\tA map of TP errors.\n\n\t\"\"\"\n\tif isinstance(value, go.GoClass):\n\t\t_pygs.consts_Set_TPError(value.handle)\n\telse:\n\t\t_pygs.consts_Set_TPError(value)\n</code></pre>"},{"location":"consts.html#src.consts.Set_UhfGWResErr","title":"<code>Set_UhfGWResErr(value)</code>","text":"<p>Set_UhfGWResErr Sets Go Variable: consts.UhfGWResErr A map of UHF GW errors.</p> Source code in <code>src/consts.py</code> <pre><code>def Set_UhfGWResErr(value):\n\t\"\"\"\n\tSet_UhfGWResErr Sets Go Variable: consts.UhfGWResErr\n\tA map of UHF GW errors.\n\n\t\"\"\"\n\tif isinstance(value, go.GoClass):\n\t\t_pygs.consts_Set_UhfGWResErr(value.handle)\n\telse:\n\t\t_pygs.consts_Set_UhfGWResErr(value)\n</code></pre>"},{"location":"consts.html#src.consts.TPError","title":"<code>TPError()</code>","text":"<p>TPError Gets Go Variable: consts.TPError A map of TP errors.</p> Source code in <code>src/consts.py</code> <pre><code>def TPError():\n\t\"\"\"\n\tTPError Gets Go Variable: consts.TPError\n\tA map of TP errors.\n\n\t\"\"\"\n\treturn Map_uint8_error(handle=_pygs.consts_TPError())\n</code></pre>"},{"location":"consts.html#src.consts.UhfGWResErr","title":"<code>UhfGWResErr()</code>","text":"<p>UhfGWResErr Gets Go Variable: consts.UhfGWResErr A map of UHF GW errors.</p> Source code in <code>src/consts.py</code> <pre><code>def UhfGWResErr():\n\t\"\"\"\n\tUhfGWResErr Gets Go Variable: consts.UhfGWResErr\n\tA map of UHF GW errors.\n\n\t\"\"\"\n\treturn Map_uint8_error(handle=_pygs.consts_UhfGWResErr())\n</code></pre>"},{"location":"datalink.html","title":"Protocols multi-address formats","text":""},{"location":"datalink.html#mac-gateway","title":"Mac Gateway","text":"<p>For communication through Mac dongles</p> <p>/esmgw/&lt;mac_addr&gt;</p> <p>where &lt;mac_addr&gt; is the mac address of the target module</p>"},{"location":"datalink.html#mac","title":"Mac","text":"<p>For communication directly on the satellite bus (RS485)</p> <p>/esmac/&lt;mac_addr&gt;</p> <p>where &lt;mac_addr&gt; is the mac address of the target module</p>"},{"location":"event_notifier.html","title":"event_notifier","text":""},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_AirHSResp","title":"<code>EventNotifierId_AirHSResp = 700</code>  <code>module-attribute</code>","text":"<p>Response handshake has been received.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_AirInitHS","title":"<code>EventNotifierId_AirInitHS = 600</code>  <code>module-attribute</code>","text":"<p>Init handshake has been sent.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_CPErr","title":"<code>EventNotifierId_CPErr = 200</code>  <code>module-attribute</code>","text":"<p>A CP packet's header has an error flag set.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_DataTick","title":"<code>EventNotifierId_DataTick = 100</code>  <code>module-attribute</code>","text":"<p>A datalink layer is about to receive or send data frame.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_FWUpdErr","title":"<code>EventNotifierId_FWUpdErr = 300</code>  <code>module-attribute</code>","text":"<p>A firmware status packet has an error flag set.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_MacGWErr","title":"<code>EventNotifierId_MacGWErr = 400</code>  <code>module-attribute</code>","text":"<p>A MacGW frame has an error flag set.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_TPDataRecv","title":"<code>EventNotifierId_TPDataRecv = 6</code>  <code>module-attribute</code>","text":"<p>A TP data packet has been received.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_TPDataSent","title":"<code>EventNotifierId_TPDataSent = 5</code>  <code>module-attribute</code>","text":"<p>A TP data packet has been sent.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_TPErr","title":"<code>EventNotifierId_TPErr = 7</code>  <code>module-attribute</code>","text":"<p>A module has responded with a status packet containing an error.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_TPStatusRecv","title":"<code>EventNotifierId_TPStatusRecv = 4</code>  <code>module-attribute</code>","text":"<p>A TP status packet has been received.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_TPStatusSent","title":"<code>EventNotifierId_TPStatusSent = 3</code>  <code>module-attribute</code>","text":"<p>A TP status packet has been sent.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_TPSyncRecv","title":"<code>EventNotifierId_TPSyncRecv = 2</code>  <code>module-attribute</code>","text":"<p>A TP sync packet has been received.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_TPSyncSent","title":"<code>EventNotifierId_TPSyncSent = 1</code>  <code>module-attribute</code>","text":"<p>A TP sync packet has been sent.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId_UhfGWErr","title":"<code>EventNotifierId_UhfGWErr = 500</code>  <code>module-attribute</code>","text":"<p>A UhfGW frame has an error flag set.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifier","title":"<code>EventNotifier</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>An event notifier, fired on specific hard-wired events and can hold data. It can be subscribed to by observers.</p> Source code in <code>src/event_notifier.py</code> <pre><code>class EventNotifier(go.GoClass):\n\t\"\"\"An event notifier, fired on specific hard-wired events and can hold data. It can be subscribed to by observers.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.event_notifier_EventNotifier_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'event_notifier.EventNotifier{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'event_notifier.EventNotifier ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\tdef Subscribe(self, o, goRun=False):\n\t\t\"\"\"Subscribe(object o) \n\n\t\tSubscribe to this event notifier.\n\t\t\"\"\"\n\t\t_pygs.event_notifier_EventNotifier_Subscribe(self.handle, o.handle, goRun)\n\tdef Unsubscribe(self, o, goRun=False):\n\t\t\"\"\"Unsubscribe(object o) \n\n\t\tUnsubscribe from this event notifier.\n\t\t\"\"\"\n\t\t_pygs.event_notifier_EventNotifier_Unsubscribe(self.handle, o.handle, goRun)\n\tdef Notify(self, goRun=False):\n\t\t\"\"\"Notify() \n\n\t\tNotify all observers of this event.\n\t\t\"\"\"\n\t\t_pygs.event_notifier_EventNotifier_Notify(self.handle, goRun)\n\tdef NotifyWithData(self, data, dataInfo, goRun=False):\n\t\t\"\"\"NotifyWithData([]int data, str dataInfo) \n\n\t\tNotify all observers of this event, with data.\n\t\t\"\"\"\n\t\t_pygs.event_notifier_EventNotifier_NotifyWithData(self.handle, data.handle, dataInfo, goRun)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.EventNotifier.Notify","title":"<code>Notify(goRun=False)</code>","text":"<p>Notify() </p> <p>Notify all observers of this event.</p> Source code in <code>src/event_notifier.py</code> <pre><code>def Notify(self, goRun=False):\n\t\"\"\"Notify() \n\n\tNotify all observers of this event.\n\t\"\"\"\n\t_pygs.event_notifier_EventNotifier_Notify(self.handle, goRun)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.EventNotifier.NotifyWithData","title":"<code>NotifyWithData(data, dataInfo, goRun=False)</code>","text":"<p>NotifyWithData([]int data, str dataInfo) </p> <p>Notify all observers of this event, with data.</p> Source code in <code>src/event_notifier.py</code> <pre><code>def NotifyWithData(self, data, dataInfo, goRun=False):\n\t\"\"\"NotifyWithData([]int data, str dataInfo) \n\n\tNotify all observers of this event, with data.\n\t\"\"\"\n\t_pygs.event_notifier_EventNotifier_NotifyWithData(self.handle, data.handle, dataInfo, goRun)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.EventNotifier.Subscribe","title":"<code>Subscribe(o, goRun=False)</code>","text":"<p>Subscribe(object o) </p> <p>Subscribe to this event notifier.</p> Source code in <code>src/event_notifier.py</code> <pre><code>def Subscribe(self, o, goRun=False):\n\t\"\"\"Subscribe(object o) \n\n\tSubscribe to this event notifier.\n\t\"\"\"\n\t_pygs.event_notifier_EventNotifier_Subscribe(self.handle, o.handle, goRun)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.EventNotifier.Unsubscribe","title":"<code>Unsubscribe(o, goRun=False)</code>","text":"<p>Unsubscribe(object o) </p> <p>Unsubscribe from this event notifier.</p> Source code in <code>src/event_notifier.py</code> <pre><code>def Unsubscribe(self, o, goRun=False):\n\t\"\"\"Unsubscribe(object o) \n\n\tUnsubscribe from this event notifier.\n\t\"\"\"\n\t_pygs.event_notifier_EventNotifier_Unsubscribe(self.handle, o.handle, goRun)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.EventNotifier.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/event_notifier.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.event_notifier_EventNotifier_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId","title":"<code>EventNotifierId</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration of all defined event notifier ids.</p> Source code in <code>src/event_notifier.py</code> <pre><code>class EventNotifierId(Enum):\n\t\"\"\"\n\tAn enumeration of all defined event notifier ids.\n\n\t\"\"\"\n\tEventNotifierId_TPSyncSent = 1\n\t\"\"\"\n\tA TP sync packet has been sent.\n\n\t\"\"\"\n\tEventNotifierId_TPSyncRecv = 2\n\t\"\"\"\n\tA TP sync packet has been received.\n\n\t\"\"\"\n\tEventNotifierId_TPStatusSent = 3\n\t\"\"\"\n\tA TP status packet has been sent.\n\n\t\"\"\"\n\tEventNotifierId_TPStatusRecv = 4\n\t\"\"\"\n\tA TP status packet has been received.\n\n\t\"\"\"\n\tEventNotifierId_TPDataSent = 5\n\t\"\"\"\n\tA TP data packet has been sent.\n\n\t\"\"\"\n\tEventNotifierId_TPDataRecv = 6\n\t\"\"\"\n\tA TP data packet has been received.\n\n\t\"\"\"\n\tEventNotifierId_TPErr = 7\n\t\"\"\"\n\tA module has responded with a status packet containing an error.\n\n\t\"\"\"\n\tEventNotifierId_DataTick = 100\n\t\"\"\"\n\tA datalink layer is about to receive or send data frame.\n\n\t\"\"\"\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_DataTick","title":"<code>EventNotifierId_DataTick = 100</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A datalink layer is about to receive or send data frame.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_TPDataRecv","title":"<code>EventNotifierId_TPDataRecv = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A TP data packet has been received.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_TPDataSent","title":"<code>EventNotifierId_TPDataSent = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A TP data packet has been sent.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_TPErr","title":"<code>EventNotifierId_TPErr = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A module has responded with a status packet containing an error.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_TPStatusRecv","title":"<code>EventNotifierId_TPStatusRecv = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A TP status packet has been received.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_TPStatusSent","title":"<code>EventNotifierId_TPStatusSent = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A TP status packet has been sent.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_TPSyncRecv","title":"<code>EventNotifierId_TPSyncRecv = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A TP sync packet has been received.</p>"},{"location":"event_notifier.html#src.event_notifier.EventNotifierId.EventNotifierId_TPSyncSent","title":"<code>EventNotifierId_TPSyncSent = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A TP sync packet has been sent.</p>"},{"location":"event_notifier.html#src.event_notifier.FuncEventObserver","title":"<code>FuncEventObserver</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>A simple implementation of an observer, which calls fun.</p> Source code in <code>src/event_notifier.py</code> <pre><code>class FuncEventObserver(go.GoClass):\n\t\"\"\"A simple implementation of an observer, which calls fun.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.event_notifier_FuncEventObserver_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'event_notifier.FuncEventObserver{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'event_notifier.FuncEventObserver ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\tdef OnNotify(self, goRun=False):\n\t\t\"\"\"OnNotify() \n\n\t\tCalled when the event notifier is notified.\n\t\t\"\"\"\n\t\t_pygs.event_notifier_FuncEventObserver_OnNotify(self.handle, goRun)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.FuncEventObserver.OnNotify","title":"<code>OnNotify(goRun=False)</code>","text":"<p>OnNotify() </p> <p>Called when the event notifier is notified.</p> Source code in <code>src/event_notifier.py</code> <pre><code>def OnNotify(self, goRun=False):\n\t\"\"\"OnNotify() \n\n\tCalled when the event notifier is notified.\n\t\"\"\"\n\t_pygs.event_notifier_FuncEventObserver_OnNotify(self.handle, goRun)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.FuncEventObserver.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/event_notifier.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.event_notifier_FuncEventObserver_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.Get","title":"<code>Get(id)</code>","text":"<p>Get(int id) object</p> <p>Get a pointer to a singleton EventNotifier per given id.</p> Source code in <code>src/event_notifier.py</code> <pre><code>def Get(id):\n\t\"\"\"Get(int id) object\n\n\tGet a pointer to a singleton EventNotifier per given id.\n\t\"\"\"\n\treturn EventNotifier(handle=_pygs.event_notifier_Get(id))\n</code></pre>"},{"location":"event_notifier.html#src.event_notifier.NewFuncEventObserver","title":"<code>NewFuncEventObserver(fun, notifier)</code>","text":"<p>NewFuncEventObserver(callable fun, object notifier) object</p> <p>Constructor for FuncEventObserver. fun will be called upon notify. During its execution, the communication thread will be blocked, so Fun should not be blocking. fun will receive the data associated with the event notifier.</p> Source code in <code>src/event_notifier.py</code> <pre><code>def NewFuncEventObserver(fun, notifier):\n\t\"\"\"NewFuncEventObserver(callable fun, object notifier) object\n\n\tConstructor for FuncEventObserver.\n\tfun will be called upon notify. During its execution, the communication thread will be blocked, so Fun should not be blocking.\n\tfun will receive the data associated with the event notifier.\n\t\"\"\"\n\treturn FuncEventObserver(handle=_pygs.event_notifier_NewFuncEventObserver(fun, notifier.handle))\n</code></pre>"},{"location":"go.html","title":"go","text":""},{"location":"go.html#src.go.GoClass","title":"<code>GoClass</code>","text":"<p>             Bases: <code>object</code></p> <p>GoClass is the base class for all GoPy wrapper classes</p> Source code in <code>src/go.py</code> <pre><code>class GoClass(object):\n\t\"\"\"GoClass is the base class for all GoPy wrapper classes\"\"\"\n\tdef __init__(self):\n\t\tself.handle = 0\n</code></pre>"},{"location":"go.html#src.go.Ptr_yaml_Node","title":"<code>Ptr_yaml_Node</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Ptr_yaml_Node(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], int):\n\t\t\tself.handle = args[0]\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = 0\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n</code></pre>"},{"location":"go.html#src.go.Ptr_yaml_Node.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], int):\n\t\tself.handle = args[0]\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = 0\n</code></pre>"},{"location":"go.html#src.go.Slice_bool","title":"<code>Slice_bool</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_bool(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_bool_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_bool.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_bool len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_bool([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_bool_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_bool_len(self.handle)\n\t\t\t\treturn Slice_bool(handle=_pygs.Slice_bool_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_bool_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_bool_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_bool.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_bool_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_bool_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_bool.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_bool_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_bool.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_bool.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_byte","title":"<code>Slice_byte</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_byte(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_byte_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_byte.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_byte len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_byte([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_byte_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_byte_len(self.handle)\n\t\t\t\treturn Slice_byte(handle=_pygs.Slice_byte_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_byte_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_byte_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_byte.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_byte_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_byte_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_byte.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_byte_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_byte.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_byte.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_error","title":"<code>Slice_error</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_error(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_error_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_error.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_error len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_error([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_error_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_error_len(self.handle)\n\t\t\t\treturn Slice_error(handle=_pygs.Slice_error_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_error_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_error_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_error.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_error_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_error_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_error.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_error_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_error.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_error.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_float32","title":"<code>Slice_float32</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_float32(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_float32_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_float32.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_float32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_float32([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_float32_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_float32_len(self.handle)\n\t\t\t\treturn Slice_float32(handle=_pygs.Slice_float32_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_float32_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_float32_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_float32.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_float32_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_float32_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_float32.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_float32_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_float32.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_float32.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_float64","title":"<code>Slice_float64</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_float64(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_float64_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_float64.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_float64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_float64([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_float64_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_float64_len(self.handle)\n\t\t\t\treturn Slice_float64(handle=_pygs.Slice_float64_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_float64_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_float64_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_float64.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_float64_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_float64_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_float64.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_float64_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_float64.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_float64.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int","title":"<code>Slice_int</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_int(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_int_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_int.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_int len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_int([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_int_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_int_len(self.handle)\n\t\t\t\treturn Slice_int(handle=_pygs.Slice_int_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_int_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_int_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_int.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_int_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_int_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_int_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_int.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_int.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int16","title":"<code>Slice_int16</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_int16(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_int16_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_int16.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_int16 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_int16([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_int16_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_int16_len(self.handle)\n\t\t\t\treturn Slice_int16(handle=_pygs.Slice_int16_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_int16_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_int16_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_int16.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_int16_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_int16_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int16.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_int16_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_int16.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_int16.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int32","title":"<code>Slice_int32</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_int32(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_int32_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_int32.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_int32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_int32([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_int32_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_int32_len(self.handle)\n\t\t\t\treturn Slice_int32(handle=_pygs.Slice_int32_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_int32_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_int32_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_int32.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_int32_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_int32_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int32.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_int32_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_int32.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_int32.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int64","title":"<code>Slice_int64</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_int64(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_int64_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_int64.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_int64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_int64([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_int64_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_int64_len(self.handle)\n\t\t\t\treturn Slice_int64(handle=_pygs.Slice_int64_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_int64_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_int64_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_int64.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_int64_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_int64_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int64.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_int64_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_int64.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_int64.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int8","title":"<code>Slice_int8</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_int8(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_int8_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_int8.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_int8 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_int8([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_int8_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_int8_len(self.handle)\n\t\t\t\treturn Slice_int8(handle=_pygs.Slice_int8_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_int8_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_int8_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_int8.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_int8_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_int8_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_int8.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_int8_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_int8.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_int8.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_rune","title":"<code>Slice_rune</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_rune(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_rune_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_rune.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_rune len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_rune([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_rune_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_rune_len(self.handle)\n\t\t\t\treturn Slice_rune(handle=_pygs.Slice_rune_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_rune_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_rune_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_rune.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_rune_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_rune_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_rune.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_rune_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_rune.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_rune.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_string","title":"<code>Slice_string</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_string(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_string_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_string.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_string len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_string([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_string_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_string_len(self.handle)\n\t\t\t\treturn Slice_string(handle=_pygs.Slice_string_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_string_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_string_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_string.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_string_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_string_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_string.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_string_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_string.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_string.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint","title":"<code>Slice_uint</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_uint(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_uint_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_uint.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_uint len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_uint([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_uint_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_uint_len(self.handle)\n\t\t\t\treturn Slice_uint(handle=_pygs.Slice_uint_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_uint_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_uint_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_uint.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_uint_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_uint_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_uint_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_uint.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_uint.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint16","title":"<code>Slice_uint16</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_uint16(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_uint16_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_uint16.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_uint16 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_uint16([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_uint16_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_uint16_len(self.handle)\n\t\t\t\treturn Slice_uint16(handle=_pygs.Slice_uint16_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_uint16_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_uint16_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_uint16.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_uint16_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_uint16_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint16.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_uint16_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_uint16.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_uint16.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint32","title":"<code>Slice_uint32</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_uint32(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_uint32_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_uint32.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_uint32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_uint32([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_uint32_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_uint32_len(self.handle)\n\t\t\t\treturn Slice_uint32(handle=_pygs.Slice_uint32_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_uint32_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_uint32_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_uint32.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_uint32_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_uint32_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint32.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_uint32_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_uint32.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_uint32.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint64","title":"<code>Slice_uint64</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_uint64(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_uint64_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_uint64.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_uint64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_uint64([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_uint64_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_uint64_len(self.handle)\n\t\t\t\treturn Slice_uint64(handle=_pygs.Slice_uint64_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_uint64_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_uint64_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_uint64.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_uint64_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_uint64_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint64.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_uint64_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_uint64.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_uint64.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint8","title":"<code>Slice_uint8</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class Slice_uint8(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_uint8_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_uint8.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'go.Slice_uint8 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'go.Slice_uint8([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_uint8_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_uint8_len(self.handle)\n\t\t\t\treturn Slice_uint8(handle=_pygs.Slice_uint8_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn _pygs.Slice_uint8_elem(self.handle, key)\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_uint8_set(self.handle, idx, value)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_uint8.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = _pygs.Slice_uint8_elem(self.handle, self.index)\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_uint8_append(self.handle, value)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.Slice_uint8.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_uint8_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_uint8.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"go.html#src.go.Slice_uint8.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/go.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"go.html#src.go.util_ConfigUnmarshaler","title":"<code>util_ConfigUnmarshaler</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class util_ConfigUnmarshaler(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], int):\n\t\t\tself.handle = args[0]\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = 0\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n</code></pre>"},{"location":"go.html#src.go.util_ConfigUnmarshaler.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], int):\n\t\tself.handle = args[0]\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = 0\n</code></pre>"},{"location":"go.html#src.go.util_Observer","title":"<code>util_Observer</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class util_Observer(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], int):\n\t\t\tself.handle = args[0]\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = 0\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n</code></pre>"},{"location":"go.html#src.go.util_Observer.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], int):\n\t\tself.handle = args[0]\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = 0\n</code></pre>"},{"location":"go.html#src.go.yaml_Node","title":"<code>yaml_Node</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class yaml_Node(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], int):\n\t\t\tself.handle = args[0]\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = 0\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n</code></pre>"},{"location":"go.html#src.go.yaml_Node.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], int):\n\t\tself.handle = args[0]\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = 0\n</code></pre>"},{"location":"go.html#src.go.yaml_config_Option","title":"<code>yaml_config_Option</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/go.py</code> <pre><code>class yaml_config_Option(GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], int):\n\t\t\tself.handle = args[0]\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = 0\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n</code></pre>"},{"location":"go.html#src.go.yaml_config_Option.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg</p> Source code in <code>src/go.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], int):\n\t\tself.handle = args[0]\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = 0\n</code></pre>"},{"location":"go.html#src.go.Init","title":"<code>Init()</code>","text":"<p>calls the GoPyInit function, which runs the 'main' code string that was passed using -main arg to gopy</p> Source code in <code>src/go.py</code> <pre><code>def Init():\n\t\"\"\"calls the GoPyInit function, which runs the 'main' code string that was passed using -main arg to gopy\"\"\"\n\t_pygs.GoPyInit()\n</code></pre>"},{"location":"gs.html","title":"gs","text":""},{"location":"gs.html#src.gs.Conn","title":"<code>Conn</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>A (protocol) connection to a module, which can be used to read and write data.</p> Source code in <code>src/gs.py</code> <pre><code>class Conn(go.GoClass):\n\t\"\"\"A (protocol) connection to a module, which can be used to read and write data.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_Conn_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.Conn{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.Conn ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\tdef Subscribe(self, onNotify):\n\t\t\"\"\"Subscribe(object onNotify) str\n\n\t\tSubscribe to notifications without data.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_Subscribe(self.handle, onNotify.handle)\n\tdef Unsubscribe(self):\n\t\t\"\"\"Unsubscribe() str\n\n\t\tUnsubscribe from notifications.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_Unsubscribe(self.handle)\n\tdef SubscribeData(self, onNotify):\n\t\t\"\"\"SubscribeData(object onNotify) str\n\n\t\tSubscribe to data notifications.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_SubscribeData(self.handle, onNotify.handle)\n\tdef UnsubscribeData(self):\n\t\t\"\"\"UnsubscribeData() str\n\n\t\tUnsubscribe from data notifications.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_UnsubscribeData(self.handle)\n\tdef SubscribeFrame(self, onNotify):\n\t\t\"\"\"SubscribeFrame(object onNotify) str\n\n\t\tSubscribe to per-frame notifications.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_SubscribeFrame(self.handle, onNotify.handle)\n\tdef UnsubscribeFrame(self):\n\t\t\"\"\"UnsubscribeFrame() str\n\n\t\tUnsubscribe from per-frame notifications.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_UnsubscribeFrame(self.handle)\n\tdef Read(self, data):\n\t\t\"\"\"Read(object data) str err\n\n\t\tRead data.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_Read(self.handle, data.handle)\n\tdef Write(self, data):\n\t\t\"\"\"Write([]int data) str err\n\n\t\tWrite data.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\treturn _pygs.gs_Conn_Write(self.handle, data.handle)\n\tdef Cancel(self, goRun=False):\n\t\t\"\"\"Cancel() \n\n\t\tSends a cancel request to the datalink connection.\n\t\tThe connection will return cancelled error on the next frame read or write.\n\t\tThread safe.\n\t\t\"\"\"\n\t\t_pygs.gs_Conn_Cancel(self.handle, goRun)\n\tdef Close(self, goRun=False):\n\t\t\"\"\"Close() \n\n\t\tClose the (protocol) connection.\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\t_pygs.gs_Conn_Close(self.handle, goRun)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.Cancel","title":"<code>Cancel(goRun=False)</code>","text":"<p>Cancel() </p> <p>Sends a cancel request to the datalink connection. The connection will return cancelled error on the next frame read or write. Thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def Cancel(self, goRun=False):\n\t\"\"\"Cancel() \n\n\tSends a cancel request to the datalink connection.\n\tThe connection will return cancelled error on the next frame read or write.\n\tThread safe.\n\t\"\"\"\n\t_pygs.gs_Conn_Cancel(self.handle, goRun)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.Close","title":"<code>Close(goRun=False)</code>","text":"<p>Close() </p> <p>Close the (protocol) connection. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def Close(self, goRun=False):\n\t\"\"\"Close() \n\n\tClose the (protocol) connection.\n\tNot thread safe.\n\t\"\"\"\n\t_pygs.gs_Conn_Close(self.handle, goRun)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.Read","title":"<code>Read(data)</code>","text":"<p>Read(object data) str err</p> <p>Read data. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def Read(self, data):\n\t\"\"\"Read(object data) str err\n\n\tRead data.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_Read(self.handle, data.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.Subscribe","title":"<code>Subscribe(onNotify)</code>","text":"<p>Subscribe(object onNotify) str</p> <p>Subscribe to notifications without data. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def Subscribe(self, onNotify):\n\t\"\"\"Subscribe(object onNotify) str\n\n\tSubscribe to notifications without data.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_Subscribe(self.handle, onNotify.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.SubscribeData","title":"<code>SubscribeData(onNotify)</code>","text":"<p>SubscribeData(object onNotify) str</p> <p>Subscribe to data notifications. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def SubscribeData(self, onNotify):\n\t\"\"\"SubscribeData(object onNotify) str\n\n\tSubscribe to data notifications.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_SubscribeData(self.handle, onNotify.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.SubscribeFrame","title":"<code>SubscribeFrame(onNotify)</code>","text":"<p>SubscribeFrame(object onNotify) str</p> <p>Subscribe to per-frame notifications. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def SubscribeFrame(self, onNotify):\n\t\"\"\"SubscribeFrame(object onNotify) str\n\n\tSubscribe to per-frame notifications.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_SubscribeFrame(self.handle, onNotify.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.Unsubscribe","title":"<code>Unsubscribe()</code>","text":"<p>Unsubscribe() str</p> <p>Unsubscribe from notifications. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def Unsubscribe(self):\n\t\"\"\"Unsubscribe() str\n\n\tUnsubscribe from notifications.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_Unsubscribe(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.UnsubscribeData","title":"<code>UnsubscribeData()</code>","text":"<p>UnsubscribeData() str</p> <p>Unsubscribe from data notifications. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def UnsubscribeData(self):\n\t\"\"\"UnsubscribeData() str\n\n\tUnsubscribe from data notifications.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_UnsubscribeData(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.UnsubscribeFrame","title":"<code>UnsubscribeFrame()</code>","text":"<p>UnsubscribeFrame() str</p> <p>Unsubscribe from per-frame notifications. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def UnsubscribeFrame(self):\n\t\"\"\"UnsubscribeFrame() str\n\n\tUnsubscribe from per-frame notifications.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_UnsubscribeFrame(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.Write","title":"<code>Write(data)</code>","text":"<p>Write([]int data) str err</p> <p>Write data. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def Write(self, data):\n\t\"\"\"Write([]int data) str err\n\n\tWrite data.\n\tNot thread safe.\n\t\"\"\"\n\treturn _pygs.gs_Conn_Write(self.handle, data.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Conn.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_Conn_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.DataNotify","title":"<code>DataNotify</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Data notify callback function.</p> Source code in <code>src/gs.py</code> <pre><code>class DataNotify(go.GoClass):\n\t\"\"\"Data notify callback function.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_DataNotify_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.DataNotify{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.DataNotify ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n</code></pre>"},{"location":"gs.html#src.gs.DataNotify.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_DataNotify_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.DataResult","title":"<code>DataResult</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Data notify result.</p> Source code in <code>src/gs.py</code> <pre><code>class DataResult(go.GoClass):\n\t\"\"\"Data notify result.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_DataResult_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.Data = args[0]\n\t\t\tif \"Data\" in kwargs:\n\t\t\t\tself.Data = kwargs[\"Data\"]\n\t\t\tif  1 &lt; len(args):\n\t\t\t\tself.DataOffset = args[1]\n\t\t\tif \"DataOffset\" in kwargs:\n\t\t\t\tself.DataOffset = kwargs[\"DataOffset\"]\n\t\t\tif  2 &lt; len(args):\n\t\t\t\tself.DataWholeSize = args[2]\n\t\t\tif \"DataWholeSize\" in kwargs:\n\t\t\t\tself.DataWholeSize = kwargs[\"DataWholeSize\"]\n\t\t\tif  3 &lt; len(args):\n\t\t\t\tself.IsRead = args[3]\n\t\t\tif \"IsRead\" in kwargs:\n\t\t\t\tself.IsRead = kwargs[\"IsRead\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.DataResult{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.DataResult ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef Data(self):\n\t\treturn go.Slice_byte(handle=_pygs.gs_DataResult_Data_Get(self.handle))\n\t@Data.setter\n\tdef Data(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_DataResult_Data_Set(self.handle, value.handle)\n\t\telse:\n\t\t\traise TypeError(\"supplied argument type {t} is not a go.GoClass\".format(t=type(value)))\n\t@property\n\tdef DataOffset(self):\n\t\treturn _pygs.gs_DataResult_DataOffset_Get(self.handle)\n\t@DataOffset.setter\n\tdef DataOffset(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_DataResult_DataOffset_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.gs_DataResult_DataOffset_Set(self.handle, value)\n\t@property\n\tdef DataWholeSize(self):\n\t\treturn _pygs.gs_DataResult_DataWholeSize_Get(self.handle)\n\t@DataWholeSize.setter\n\tdef DataWholeSize(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_DataResult_DataWholeSize_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.gs_DataResult_DataWholeSize_Set(self.handle, value)\n\t@property\n\tdef IsRead(self):\n\t\treturn _pygs.gs_DataResult_IsRead_Get(self.handle)\n\t@IsRead.setter\n\tdef IsRead(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_DataResult_IsRead_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.gs_DataResult_IsRead_Set(self.handle, value)\n</code></pre>"},{"location":"gs.html#src.gs.DataResult.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_DataResult_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.Data = args[0]\n\t\tif \"Data\" in kwargs:\n\t\t\tself.Data = kwargs[\"Data\"]\n\t\tif  1 &lt; len(args):\n\t\t\tself.DataOffset = args[1]\n\t\tif \"DataOffset\" in kwargs:\n\t\t\tself.DataOffset = kwargs[\"DataOffset\"]\n\t\tif  2 &lt; len(args):\n\t\t\tself.DataWholeSize = args[2]\n\t\tif \"DataWholeSize\" in kwargs:\n\t\t\tself.DataWholeSize = kwargs[\"DataWholeSize\"]\n\t\tif  3 &lt; len(args):\n\t\t\tself.IsRead = args[3]\n\t\tif \"IsRead\" in kwargs:\n\t\t\tself.IsRead = kwargs[\"IsRead\"]\n</code></pre>"},{"location":"gs.html#src.gs.FrameNotify","title":"<code>FrameNotify</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Frame notify callback function.</p> Source code in <code>src/gs.py</code> <pre><code>class FrameNotify(go.GoClass):\n\t\"\"\"Frame notify callback function.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_FrameNotify_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.FrameNotify{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.FrameNotify ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n</code></pre>"},{"location":"gs.html#src.gs.FrameNotify.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_FrameNotify_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.FrameResult","title":"<code>FrameResult</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Frame notify result.</p> Source code in <code>src/gs.py</code> <pre><code>class FrameResult(go.GoClass):\n\t\"\"\"Frame notify result.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_FrameResult_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.LocalAddr = args[0]\n\t\t\tif \"LocalAddr\" in kwargs:\n\t\t\t\tself.LocalAddr = kwargs[\"LocalAddr\"]\n\t\t\tif  1 &lt; len(args):\n\t\t\t\tself.RemoteAddr = args[1]\n\t\t\tif \"RemoteAddr\" in kwargs:\n\t\t\t\tself.RemoteAddr = kwargs[\"RemoteAddr\"]\n\t\t\tif  2 &lt; len(args):\n\t\t\t\tself.Data = args[2]\n\t\t\tif \"Data\" in kwargs:\n\t\t\t\tself.Data = kwargs[\"Data\"]\n\t\t\tif  3 &lt; len(args):\n\t\t\t\tself.IsRead = args[3]\n\t\t\tif \"IsRead\" in kwargs:\n\t\t\t\tself.IsRead = kwargs[\"IsRead\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.FrameResult{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.FrameResult ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef LocalAddr(self):\n\t\treturn _pygs.gs_FrameResult_LocalAddr_Get(self.handle)\n\t@LocalAddr.setter\n\tdef LocalAddr(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_FrameResult_LocalAddr_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.gs_FrameResult_LocalAddr_Set(self.handle, value)\n\t@property\n\tdef RemoteAddr(self):\n\t\treturn _pygs.gs_FrameResult_RemoteAddr_Get(self.handle)\n\t@RemoteAddr.setter\n\tdef RemoteAddr(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_FrameResult_RemoteAddr_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.gs_FrameResult_RemoteAddr_Set(self.handle, value)\n\t@property\n\tdef Data(self):\n\t\treturn go.Slice_byte(handle=_pygs.gs_FrameResult_Data_Get(self.handle))\n\t@Data.setter\n\tdef Data(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_FrameResult_Data_Set(self.handle, value.handle)\n\t\telse:\n\t\t\traise TypeError(\"supplied argument type {t} is not a go.GoClass\".format(t=type(value)))\n\t@property\n\tdef IsRead(self):\n\t\treturn _pygs.gs_FrameResult_IsRead_Get(self.handle)\n\t@IsRead.setter\n\tdef IsRead(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.gs_FrameResult_IsRead_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.gs_FrameResult_IsRead_Set(self.handle, value)\n</code></pre>"},{"location":"gs.html#src.gs.FrameResult.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_FrameResult_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.LocalAddr = args[0]\n\t\tif \"LocalAddr\" in kwargs:\n\t\t\tself.LocalAddr = kwargs[\"LocalAddr\"]\n\t\tif  1 &lt; len(args):\n\t\t\tself.RemoteAddr = args[1]\n\t\tif \"RemoteAddr\" in kwargs:\n\t\t\tself.RemoteAddr = kwargs[\"RemoteAddr\"]\n\t\tif  2 &lt; len(args):\n\t\t\tself.Data = args[2]\n\t\tif \"Data\" in kwargs:\n\t\t\tself.Data = kwargs[\"Data\"]\n\t\tif  3 &lt; len(args):\n\t\t\tself.IsRead = args[3]\n\t\tif \"IsRead\" in kwargs:\n\t\t\tself.IsRead = kwargs[\"IsRead\"]\n</code></pre>"},{"location":"gs.html#src.gs.GS","title":"<code>GS</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>A ground station. Holds default configurations, which will be used for the connections. They can be overridden.</p> Source code in <code>src/gs.py</code> <pre><code>class GS(go.GoClass):\n\t\"\"\"A ground station. Holds default configurations, which will be used for the connections. They can be overridden.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_GS_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.GS{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.GS ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\tdef ConfigUnmarshaler(self):\n\t\t\"\"\"ConfigUnmarshaler() object\n\n\t\tGet the current GS configuration.\n\t\t\"\"\"\n\t\treturn go.util_ConfigUnmarshaler(handle=_pygs.gs_GS_ConfigUnmarshaler(self.handle))\n\tdef Dial(self, remoteAddrString, *args):\n\t\t\"\"\"Dial(str remoteAddrString, []object options) object conn, str err\n\n\t\tDial a connection using multi-address to setup arbitrary protocol layers.\n\t\tThe local address is configurable.\n\t\tOptions replace the current GS configuration, so if you wish to override just\n\t\tsome GS options, make sure to first add WithGS().\n\t\tNot thread safe.\n\t\t\"\"\"\n\t\toptions = Slice_yaml_config_Option(args)\n\t\treturn Conn(handle=_pygs.gs_GS_Dial(self.handle, remoteAddrString, options.handle))\n\tdef RotatorSetPosition(self, pos, notifyPos):\n\t\t\"\"\"RotatorSetPosition(object pos, callable notifyPos) str err\n\n\t\tCommand a ground station antenna rotator.\n\t\t\"\"\"\n\t\treturn _pygs.gs_GS_RotatorSetPosition(self.handle, pos.handle, notifyPos)\n</code></pre>"},{"location":"gs.html#src.gs.GS.ConfigUnmarshaler","title":"<code>ConfigUnmarshaler()</code>","text":"<p>ConfigUnmarshaler() object</p> <p>Get the current GS configuration.</p> Source code in <code>src/gs.py</code> <pre><code>def ConfigUnmarshaler(self):\n\t\"\"\"ConfigUnmarshaler() object\n\n\tGet the current GS configuration.\n\t\"\"\"\n\treturn go.util_ConfigUnmarshaler(handle=_pygs.gs_GS_ConfigUnmarshaler(self.handle))\n</code></pre>"},{"location":"gs.html#src.gs.GS.Dial","title":"<code>Dial(remoteAddrString, *args)</code>","text":"<p>Dial(str remoteAddrString, []object options) object conn, str err</p> <p>Dial a connection using multi-address to setup arbitrary protocol layers. The local address is configurable. Options replace the current GS configuration, so if you wish to override just some GS options, make sure to first add WithGS(). Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def Dial(self, remoteAddrString, *args):\n\t\"\"\"Dial(str remoteAddrString, []object options) object conn, str err\n\n\tDial a connection using multi-address to setup arbitrary protocol layers.\n\tThe local address is configurable.\n\tOptions replace the current GS configuration, so if you wish to override just\n\tsome GS options, make sure to first add WithGS().\n\tNot thread safe.\n\t\"\"\"\n\toptions = Slice_yaml_config_Option(args)\n\treturn Conn(handle=_pygs.gs_GS_Dial(self.handle, remoteAddrString, options.handle))\n</code></pre>"},{"location":"gs.html#src.gs.GS.RotatorSetPosition","title":"<code>RotatorSetPosition(pos, notifyPos)</code>","text":"<p>RotatorSetPosition(object pos, callable notifyPos) str err</p> <p>Command a ground station antenna rotator.</p> Source code in <code>src/gs.py</code> <pre><code>def RotatorSetPosition(self, pos, notifyPos):\n\t\"\"\"RotatorSetPosition(object pos, callable notifyPos) str err\n\n\tCommand a ground station antenna rotator.\n\t\"\"\"\n\treturn _pygs.gs_GS_RotatorSetPosition(self.handle, pos.handle, notifyPos)\n</code></pre>"},{"location":"gs.html#src.gs.GS.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_GS_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.GSConfig","title":"<code>GSConfig</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>GS configuration.</p> Source code in <code>src/gs.py</code> <pre><code>class GSConfig(go.GoClass):\n\t\"\"\"GS configuration.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_GSConfig_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.GSConfig{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.GSConfig ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n</code></pre>"},{"location":"gs.html#src.gs.GSConfig.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_GSConfig_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.GSConnConfig","title":"<code>GSConnConfig</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>GS connection configuration.</p> Source code in <code>src/gs.py</code> <pre><code>class GSConnConfig(go.GoClass):\n\t\"\"\"GS connection configuration.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_GSConnConfig_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.GSConnConfig{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.GSConnConfig ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n</code></pre>"},{"location":"gs.html#src.gs.GSConnConfig.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_GSConnConfig_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Notify","title":"<code>Notify</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Notify callback function.</p> Source code in <code>src/gs.py</code> <pre><code>class Notify(go.GoClass):\n\t\"\"\"Notify callback function.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_Notify_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.Notify{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.Notify ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n</code></pre>"},{"location":"gs.html#src.gs.Notify.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_Notify_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.RotatorConfig","title":"<code>RotatorConfig</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>GS rotator configuration.</p> Source code in <code>src/gs.py</code> <pre><code>class RotatorConfig(go.GoClass):\n\t\"\"\"GS rotator configuration.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.gs_RotatorConfig_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.RotatorConfig{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'gs.RotatorConfig ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n</code></pre>"},{"location":"gs.html#src.gs.RotatorConfig.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.gs_RotatorConfig_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"gs.html#src.gs.Slice_Ptr_yaml_Node","title":"<code>Slice_Ptr_yaml_Node</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/gs.py</code> <pre><code>class Slice_Ptr_yaml_Node(go.GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_Ptr_yaml_Node_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_Ptr_yaml_Node.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'gs.Slice_Ptr_yaml_Node len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'gs.Slice_Ptr_yaml_Node([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_Ptr_yaml_Node_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_Ptr_yaml_Node_len(self.handle)\n\t\t\t\treturn Slice_Ptr_yaml_Node(handle=_pygs.Slice_Ptr_yaml_Node_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn go.Ptr_yaml_Node(handle=_pygs.Slice_Ptr_yaml_Node_elem(self.handle, key))\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_Ptr_yaml_Node_set(self.handle, idx, value.handle)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_Ptr_yaml_Node.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = go.Ptr_yaml_Node(handle=_pygs.Slice_Ptr_yaml_Node_elem(self.handle, self.index))\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_Ptr_yaml_Node_append(self.handle, value.handle)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"gs.html#src.gs.Slice_Ptr_yaml_Node.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_Ptr_yaml_Node_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_Ptr_yaml_Node.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"gs.html#src.gs.Slice_Ptr_yaml_Node.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/gs.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"gs.html#src.gs.Slice_yaml_config_Option","title":"<code>Slice_yaml_config_Option</code>","text":"<p>             Bases: <code>GoClass</code></p> Source code in <code>src/gs.py</code> <pre><code>class Slice_yaml_config_Option(go.GoClass):\n\t\"\"\"\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameter is a python list that we copy from\n\t\t\"\"\"\n\t\tself.index = 0\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.Slice_yaml_config_Option_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif len(args) &gt; 0:\n\t\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\t\traise TypeError('Slice_yaml_config_Option.__init__ takes a sequence as argument')\n\t\t\t\tfor elt in args[0]:\n\t\t\t\t\tself.append(elt)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\ts = 'gs.Slice_yaml_config_Option len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['\n\t\tif len(self) &lt; 120:\n\t\t\ts += ', '.join(map(str, self)) + ']'\n\t\treturn s\n\tdef __repr__(self):\n\t\treturn 'gs.Slice_yaml_config_Option([' + ', '.join(map(str, self)) + '])'\n\tdef __len__(self):\n\t\treturn _pygs.Slice_yaml_config_Option_len(self.handle)\n\tdef __getitem__(self, key):\n\t\tif isinstance(key, slice):\n\t\t\tif key.step == None or key.step == 1:\n\t\t\t\tst = key.start\n\t\t\t\ted = key.stop\n\t\t\t\tif st == None:\n\t\t\t\t\tst = 0\n\t\t\t\tif ed == None:\n\t\t\t\t\ted = _pygs.Slice_yaml_config_Option_len(self.handle)\n\t\t\t\treturn Slice_yaml_config_Option(handle=_pygs.Slice_yaml_config_Option_subslice(self.handle, st, ed))\n\t\t\treturn [self[ii] for ii in range(*key.indices(len(self)))]\n\t\telif isinstance(key, int):\n\t\t\tif key &lt; 0:\n\t\t\t\tkey += len(self)\n\t\t\tif key &lt; 0 or key &gt;= len(self):\n\t\t\t\traise IndexError('slice index out of range')\n\t\t\treturn go.yaml_config_Option(handle=_pygs.Slice_yaml_config_Option_elem(self.handle, key))\n\t\telse:\n\t\t\traise TypeError('slice index invalid type')\n\tdef __setitem__(self, idx, value):\n\t\tif idx &lt; 0:\n\t\t\tidx += len(self)\n\t\tif idx &lt; len(self):\n\t\t\t_pygs.Slice_yaml_config_Option_set(self.handle, idx, value.handle)\n\t\t\treturn\n\t\traise IndexError('slice index out of range')\n\tdef __iadd__(self, value):\n\t\tif not isinstance(value, _collections_abc.Iterable):\n\t\t\traise TypeError('Slice_yaml_config_Option.__iadd__ takes a sequence as argument')\n\t\tfor elt in value:\n\t\t\tself.append(elt)\n\t\treturn self\n\tdef __iter__(self):\n\t\tself.index = 0\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.index &lt; len(self):\n\t\t\trv = go.yaml_config_Option(handle=_pygs.Slice_yaml_config_Option_elem(self.handle, self.index))\n\t\t\tself.index = self.index + 1\n\t\t\treturn rv\n\t\traise StopIteration\n\tdef append(self, value):\n\t\t_pygs.Slice_yaml_config_Option_append(self.handle, value.handle)\n\tdef copy(self, src):\n\t\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\t\tmx = min(len(self), len(src))\n\t\tfor i in range(mx):\n\t\t\tself[i] = src[i]\n</code></pre>"},{"location":"gs.html#src.gs.Slice_yaml_config_Option.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameter is a python list that we copy from</p> Source code in <code>src/gs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameter is a python list that we copy from\n\t\"\"\"\n\tself.index = 0\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.Slice_yaml_config_Option_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif len(args) &gt; 0:\n\t\t\tif not isinstance(args[0], _collections_abc.Iterable):\n\t\t\t\traise TypeError('Slice_yaml_config_Option.__init__ takes a sequence as argument')\n\t\t\tfor elt in args[0]:\n\t\t\t\tself.append(elt)\n</code></pre>"},{"location":"gs.html#src.gs.Slice_yaml_config_Option.copy","title":"<code>copy(src)</code>","text":"<p>copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list</p> Source code in <code>src/gs.py</code> <pre><code>def copy(self, src):\n\t\"\"\" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list \"\"\"\n\tmx = min(len(self), len(src))\n\tfor i in range(mx):\n\t\tself[i] = src[i]\n</code></pre>"},{"location":"gs.html#src.gs.Build","title":"<code>Build()</code>","text":"<p>Build() str</p> <p>Get the build number and time set during build.</p> Source code in <code>src/gs.py</code> <pre><code>def Build():\n\t\"\"\"Build() str\n\n\tGet the build number and time set during build.\n\t\"\"\"\n\treturn _pygs.gs_Build()\n</code></pre>"},{"location":"gs.html#src.gs.NewGS","title":"<code>NewGS(*args)</code>","text":"<p>NewGS([]object options) object g, str err</p> <p>Create a new \"ground station\" with config options. Not thread safe.</p> Source code in <code>src/gs.py</code> <pre><code>def NewGS(*args):\n\t\"\"\"NewGS([]object options) object g, str err\n\n\tCreate a new \"ground station\" with config options.\n\tNot thread safe.\n\t\"\"\"\n\toptions = Slice_yaml_config_Option(args)\n\treturn GS(handle=_pygs.gs_NewGS(options.handle))\n</code></pre>"},{"location":"gs.html#src.gs.Version","title":"<code>Version()</code>","text":"<p>Version() str</p> <p>Get the version set during build.</p> Source code in <code>src/gs.py</code> <pre><code>def Version():\n\t\"\"\"Version() str\n\n\tGet the version set during build.\n\t\"\"\"\n\treturn _pygs.gs_Version()\n</code></pre>"},{"location":"gs.html#src.gs.WithAir","title":"<code>WithAir(sessionTimeout)</code>","text":"<p>WithAir(str sessionTimeout) object</p> <p>Configure with specific AirMac/UHFGw protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithAir(sessionTimeout):\n\t\"\"\"WithAir(str sessionTimeout) object\n\n\tConfigure with specific AirMac/UHFGw protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithAir(sessionTimeout))\n</code></pre>"},{"location":"gs.html#src.gs.WithAirConn","title":"<code>WithAirConn(remoteRadioMac, gsId)</code>","text":"<p>WithAirConn(int remoteRadioMac, long gsId) object</p> <p>Configure with specific AirMac/UHFGw connection options</p> Source code in <code>src/gs.py</code> <pre><code>def WithAirConn(remoteRadioMac, gsId):\n\t\"\"\"WithAirConn(int remoteRadioMac, long gsId) object\n\n\tConfigure with specific AirMac/UHFGw connection options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithAirConn(remoteRadioMac, gsId))\n</code></pre>"},{"location":"gs.html#src.gs.WithAirOneWay","title":"<code>WithAirOneWay(isOneWay)</code>","text":"<p>WithAirOneWay(bool isOneWay) object</p> <p>Configure Air protocols with one-way option</p> Source code in <code>src/gs.py</code> <pre><code>def WithAirOneWay(isOneWay):\n\t\"\"\"WithAirOneWay(bool isOneWay) object\n\n\tConfigure Air protocols with one-way option\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithAirOneWay(isOneWay))\n</code></pre>"},{"location":"gs.html#src.gs.WithAmac","title":"<code>WithAmac(aesKey, aesIV)</code>","text":"<p>WithAmac(str aesKey, str aesIV) object</p> <p>Configure with specific AirMac protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithAmac(aesKey, aesIV):\n\t\"\"\"WithAmac(str aesKey, str aesIV) object\n\n\tConfigure with specific AirMac protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithAmac(aesKey, aesIV))\n</code></pre>"},{"location":"gs.html#src.gs.WithAmacConn","title":"<code>WithAmacConn(protoId)</code>","text":"<p>WithAmacConn(int protoId) object</p> <p>Configure with specific AirMac connection options</p> Source code in <code>src/gs.py</code> <pre><code>def WithAmacConn(protoId):\n\t\"\"\"WithAmacConn(int protoId) object\n\n\tConfigure with specific AirMac connection options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithAmacConn(protoId))\n</code></pre>"},{"location":"gs.html#src.gs.WithCPConn","title":"<code>WithCPConn(cmdId, cmdType, cpTripType)</code>","text":"<p>WithCPConn(long cmdId, long cmdType, int cpTripType) object</p> <p>Configure with specific CP protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithCPConn(cmdId, cmdType, cpTripType):\n\t\"\"\"WithCPConn(long cmdId, long cmdType, int cpTripType) object\n\n\tConfigure with specific CP protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithCPConn(cmdId, cmdType, cpTripType))\n</code></pre>"},{"location":"gs.html#src.gs.WithCommMacDrv","title":"<code>WithCommMacDrv(name, readTimeout, baseSendPrio)</code>","text":"<p>WithCommMacDrv(str name, str readTimeout, int baseSendPrio) object</p> <p>Configure with specific Endurosat macDrv device.</p> Source code in <code>src/gs.py</code> <pre><code>def WithCommMacDrv(name, readTimeout, baseSendPrio):\n\t\"\"\"WithCommMacDrv(str name, str readTimeout, int baseSendPrio) object\n\n\tConfigure with specific Endurosat macDrv device.\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithCommMacDrv(name, readTimeout, baseSendPrio))\n</code></pre>"},{"location":"gs.html#src.gs.WithCommNodeSerial","title":"<code>WithCommNodeSerial(optionsVar)</code>","text":"<p>WithCommNodeSerial(str optionsVar) object</p> <p>Configure with specific node serial device. Check https://github.com/serialport/node-serialport for further info on Node Serialport.</p> Source code in <code>src/gs.py</code> <pre><code>def WithCommNodeSerial(optionsVar):\n\t\"\"\"WithCommNodeSerial(str optionsVar) object\n\n\tConfigure with specific node serial device.\n\tCheck https://github.com/serialport/node-serialport for further info on Node Serialport.\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithCommNodeSerial(optionsVar))\n</code></pre>"},{"location":"gs.html#src.gs.WithCommNodeZMQ","title":"<code>WithCommNodeZMQ(optionsVar)</code>","text":"<p>WithCommNodeZMQ(str optionsVar) object</p> <p>Configure with specific node ZeroMQ device</p> Source code in <code>src/gs.py</code> <pre><code>def WithCommNodeZMQ(optionsVar):\n\t\"\"\"WithCommNodeZMQ(str optionsVar) object\n\n\tConfigure with specific node ZeroMQ device\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithCommNodeZMQ(optionsVar))\n</code></pre>"},{"location":"gs.html#src.gs.WithCommSerial","title":"<code>WithCommSerial(name, baud, readTimeout)</code>","text":"<p>WithCommSerial(str name, int baud, str readTimeout) object</p> <p>Configure with specific serial device</p> Source code in <code>src/gs.py</code> <pre><code>def WithCommSerial(name, baud, readTimeout):\n\t\"\"\"WithCommSerial(str name, int baud, str readTimeout) object\n\n\tConfigure with specific serial device\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithCommSerial(name, baud, readTimeout))\n</code></pre>"},{"location":"gs.html#src.gs.WithCommWebSerial","title":"<code>WithCommWebSerial(portVar, optionsVar)</code>","text":"<p>WithCommWebSerial(str portVar, str optionsVar) object</p> <p>Configure with specific web serial device. Check https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API for further info on Web Serial.</p> Source code in <code>src/gs.py</code> <pre><code>def WithCommWebSerial(portVar, optionsVar):\n\t\"\"\"WithCommWebSerial(str portVar, str optionsVar) object\n\n\tConfigure with specific web serial device.\n\tCheck https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API for further info on Web Serial.\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithCommWebSerial(portVar, optionsVar))\n</code></pre>"},{"location":"gs.html#src.gs.WithCommZMQ","title":"<code>WithCommZMQ(dnLink, upLink, dnLinkTimeout, upLinkTimeout)</code>","text":"<p>WithCommZMQ(str dnLink, str upLink, str dnLinkTimeout, str upLinkTimeout) object</p> <p>Configure with specific ZeroMQ device</p> Source code in <code>src/gs.py</code> <pre><code>def WithCommZMQ(dnLink, upLink, dnLinkTimeout, upLinkTimeout):\n\t\"\"\"WithCommZMQ(str dnLink, str upLink, str dnLinkTimeout, str upLinkTimeout) object\n\n\tConfigure with specific ZeroMQ device\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithCommZMQ(dnLink, upLink, dnLinkTimeout, upLinkTimeout))\n</code></pre>"},{"location":"gs.html#src.gs.WithFWUpdBundle","title":"<code>WithFWUpdBundle(SubModule, ModuleType, ModuleConfig, BoardRevision, CPUType, FWType, FWVerMaj, FWVerMin, Flags)</code>","text":"<p>WithFWUpdBundle(int SubModule, int ModuleType, int ModuleConfig, int BoardRevision, int CPUType, int FWType, int FWVerMaj, int FWVerMin, long Flags) object</p> <p>Configure with specific FWUpd bundle options. This should be used when writing binary file/firmware payloads. ES modules expect these parameters prepended to the payload, so if they aren't already bundled with it they should be provided to the connection through this functional option.</p> Source code in <code>src/gs.py</code> <pre><code>def WithFWUpdBundle(SubModule, ModuleType, ModuleConfig, BoardRevision, CPUType, FWType, FWVerMaj, FWVerMin, Flags):\n\t\"\"\"WithFWUpdBundle(int SubModule, int ModuleType, int ModuleConfig, int BoardRevision, int CPUType, int FWType, int FWVerMaj, int FWVerMin, long Flags) object\n\n\tConfigure with specific FWUpd bundle options.\n\tThis should be used when writing binary file/firmware payloads.\n\tES modules expect these parameters prepended to the payload, so if they aren't already bundled\n\twith it they should be provided to the connection through this functional option.\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithFWUpdBundle(SubModule, ModuleType, ModuleConfig, BoardRevision, CPUType, FWType, FWVerMaj, FWVerMin, Flags))\n</code></pre>"},{"location":"gs.html#src.gs.WithFWUpdConn","title":"<code>WithFWUpdConn(cmd, isBundle, fileName)</code>","text":"<p>WithFWUpdConn(int cmd, bool isBundle, str fileName) object</p> <p>Configure with specific FWUpd protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithFWUpdConn(cmd, isBundle, fileName):\n\t\"\"\"WithFWUpdConn(int cmd, bool isBundle, str fileName) object\n\n\tConfigure with specific FWUpd protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithFWUpdConn(cmd, isBundle, fileName))\n</code></pre>"},{"location":"gs.html#src.gs.WithFile","title":"<code>WithFile(val)</code>","text":"<p>WithFile(str val) object</p> <p>Configure with yaml filename</p> Source code in <code>src/gs.py</code> <pre><code>def WithFile(val):\n\t\"\"\"WithFile(str val) object\n\n\tConfigure with yaml filename\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithFile(val))\n</code></pre>"},{"location":"gs.html#src.gs.WithGS","title":"<code>WithGS(val)</code>","text":"<p>WithGS(object val) object</p> <p>Configure from an existing GS instance</p> Source code in <code>src/gs.py</code> <pre><code>def WithGS(val):\n\t\"\"\"WithGS(object val) object\n\n\tConfigure from an existing GS instance\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithGS(val.handle))\n</code></pre>"},{"location":"gs.html#src.gs.WithGSConfig","title":"<code>WithGSConfig(addresses)</code>","text":"<p>WithGSConfig(object addresses) object</p> <p>Configure with specific space separated GS local multi addresses e.g. \"esmgw\" =&gt; 1, \"esgnur/esamac\" =&gt; 0, etc.</p> Source code in <code>src/gs.py</code> <pre><code>def WithGSConfig(addresses):\n\t\"\"\"WithGSConfig(object addresses) object\n\n\tConfigure with specific space separated GS local multi addresses\n\te.g. \"esmgw\" =&gt; 1, \"esgnur/esamac\" =&gt; 0, etc.\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithGSConfig(addresses.handle))\n</code></pre>"},{"location":"gs.html#src.gs.WithGSConn","title":"<code>WithGSConn(readTimeout, writeTimeout, noProgressTimeout, maxReadBurstTimeout, maxWriteBurstTimeout, maxBurstSize)</code>","text":"<p>WithGSConn(str readTimeout, str writeTimeout, str noProgressTimeout, str maxReadBurstTimeout, str maxWriteBurstTimeout, int maxBurstSize) object</p> <p>Configure with specific GS connection configuration Any options set here (timeouts, burst sizes, etc.) are global for the whole GS instance, meaning they are definitive and aren't a subject of change by anything from within the connection. As an example - if a write timeout, set through this function, expires the GS instance will return the connection immediately.</p> Source code in <code>src/gs.py</code> <pre><code>def WithGSConn(readTimeout, writeTimeout, noProgressTimeout, maxReadBurstTimeout, maxWriteBurstTimeout, maxBurstSize):\n\t\"\"\"WithGSConn(str readTimeout, str writeTimeout, str noProgressTimeout, str maxReadBurstTimeout, str maxWriteBurstTimeout, int maxBurstSize) object\n\n\tConfigure with specific GS connection configuration\n\tAny options set here (timeouts, burst sizes, etc.) are global for the whole GS instance, meaning they are definitive and aren't a subject of change\n\tby anything from within the connection. As an example - if a write timeout, set through this function, expires the GS instance will return the connection\n\timmediately.\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithGSConn(readTimeout, writeTimeout, noProgressTimeout, maxReadBurstTimeout, maxWriteBurstTimeout, maxBurstSize))\n</code></pre>"},{"location":"gs.html#src.gs.WithGnur","title":"<code>WithGnur(comm)</code>","text":"<p>WithGnur(str comm) object</p> <p>Configure with specific GNUR protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithGnur(comm):\n\t\"\"\"WithGnur(str comm) object\n\n\tConfigure with specific GNUR protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithGnur(comm))\n</code></pre>"},{"location":"gs.html#src.gs.WithGnurConn","title":"<code>WithGnurConn(protoId)</code>","text":"<p>WithGnurConn(int protoId) object</p> <p>Configure with specific GNUR connection options</p> Source code in <code>src/gs.py</code> <pre><code>def WithGnurConn(protoId):\n\t\"\"\"WithGnurConn(int protoId) object\n\n\tConfigure with specific GNUR connection options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithGnurConn(protoId))\n</code></pre>"},{"location":"gs.html#src.gs.WithMac","title":"<code>WithMac(comm)</code>","text":"<p>WithMac(str comm) object</p> <p>Configure with specific Mac protocol options An example case of the usage of this function would be if you're communicating with an EnduroSat payload computer module. We have a specific mac driver for communication by wire there and this option could be used to configure the comms with the module.</p> Source code in <code>src/gs.py</code> <pre><code>def WithMac(comm):\n\t\"\"\"WithMac(str comm) object\n\n\tConfigure with specific Mac protocol options\n\tAn example case of the usage of this function would be if you're communicating with an\n\tEnduroSat payload computer module. We have a specific mac driver for communication by\n\twire there and this option could be used to configure the comms with the module.\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithMac(comm))\n</code></pre>"},{"location":"gs.html#src.gs.WithMacConn","title":"<code>WithMacConn(macProtoId)</code>","text":"<p>WithMacConn(int macProtoId) object</p> <p>Configure with specific Mac connection options</p> Source code in <code>src/gs.py</code> <pre><code>def WithMacConn(macProtoId):\n\t\"\"\"WithMacConn(int macProtoId) object\n\n\tConfigure with specific Mac connection options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithMacConn(macProtoId))\n</code></pre>"},{"location":"gs.html#src.gs.WithMacGW","title":"<code>WithMacGW(baseSendPrio, intf, comm)</code>","text":"<p>WithMacGW(int baseSendPrio, int intf, str comm) object</p> <p>Configure with specific MacGateway protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithMacGW(baseSendPrio, intf, comm):\n\t\"\"\"WithMacGW(int baseSendPrio, int intf, str comm) object\n\n\tConfigure with specific MacGateway protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithMacGW(baseSendPrio, intf, comm))\n</code></pre>"},{"location":"gs.html#src.gs.WithMacGWConn","title":"<code>WithMacGWConn(macProtoId)</code>","text":"<p>WithMacGWConn(int macProtoId) object</p> <p>Configure with specific MacGateway connection options</p> Source code in <code>src/gs.py</code> <pre><code>def WithMacGWConn(macProtoId):\n\t\"\"\"WithMacGWConn(int macProtoId) object\n\n\tConfigure with specific MacGateway connection options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithMacGWConn(macProtoId))\n</code></pre>"},{"location":"gs.html#src.gs.WithRFCfg","title":"<code>WithRFCfg(writeTimeout)</code>","text":"<p>WithRFCfg(str writeTimeout) object</p> <p>Configure with specific RF options</p> Source code in <code>src/gs.py</code> <pre><code>def WithRFCfg(writeTimeout):\n\t\"\"\"WithRFCfg(str writeTimeout) object\n\n\tConfigure with specific RF options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithRFCfg(writeTimeout))\n</code></pre>"},{"location":"gs.html#src.gs.WithRotator","title":"<code>WithRotator(rotator)</code>","text":"<p>WithRotator(str rotator) object</p> <p>Configure with specific GS rotator configuration</p> Source code in <code>src/gs.py</code> <pre><code>def WithRotator(rotator):\n\t\"\"\"WithRotator(str rotator) object\n\n\tConfigure with specific GS rotator configuration\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithRotator(rotator))\n</code></pre>"},{"location":"gs.html#src.gs.WithRotatorProsistelD","title":"<code>WithRotatorProsistelD(name, baud, readTimeout)</code>","text":"<p>WithRotatorProsistelD(str name, int baud, str readTimeout) object</p> <p>Configure with specific ProsisTel D rotator configuration</p> Source code in <code>src/gs.py</code> <pre><code>def WithRotatorProsistelD(name, baud, readTimeout):\n\t\"\"\"WithRotatorProsistelD(str name, int baud, str readTimeout) object\n\n\tConfigure with specific ProsisTel D rotator configuration\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithRotatorProsistelD(name, baud, readTimeout))\n</code></pre>"},{"location":"gs.html#src.gs.WithString","title":"<code>WithString(val)</code>","text":"<p>WithString(str val) object</p> <p>Configure with yaml configuration passed as a string</p> Source code in <code>src/gs.py</code> <pre><code>def WithString(val):\n\t\"\"\"WithString(str val) object\n\n\tConfigure with yaml configuration passed as a string\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithString(val))\n</code></pre>"},{"location":"gs.html#src.gs.WithTP","title":"<code>WithTP(readDataTimeout, writeDataTimeout, minWriteBurstSize, maxWriteBurstSize)</code>","text":"<p>WithTP(str readDataTimeout, str writeDataTimeout, int minWriteBurstSize, int maxWriteBurstSize) object</p> <p>Configure with specific TP protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithTP(readDataTimeout, writeDataTimeout, minWriteBurstSize, maxWriteBurstSize):\n\t\"\"\"WithTP(str readDataTimeout, str writeDataTimeout, int minWriteBurstSize, int maxWriteBurstSize) object\n\n\tConfigure with specific TP protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithTP(readDataTimeout, writeDataTimeout, minWriteBurstSize, maxWriteBurstSize))\n</code></pre>"},{"location":"gs.html#src.gs.WithTPConn","title":"<code>WithTPConn(tpProtoId, packetId, hostContext)</code>","text":"<p>WithTPConn(int tpProtoId, long packetId, long hostContext) object</p> <p>Configure with specific TP connection options</p> Source code in <code>src/gs.py</code> <pre><code>def WithTPConn(tpProtoId, packetId, hostContext):\n\t\"\"\"WithTPConn(int tpProtoId, long packetId, long hostContext) object\n\n\tConfigure with specific TP connection options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithTPConn(tpProtoId, packetId, hostContext))\n</code></pre>"},{"location":"gs.html#src.gs.WithTPOneWay","title":"<code>WithTPOneWay(isOneWay)</code>","text":"<p>WithTPOneWay(bool isOneWay) object</p> <p>Configure TP protocol with one-way option</p> Source code in <code>src/gs.py</code> <pre><code>def WithTPOneWay(isOneWay):\n\t\"\"\"WithTPOneWay(bool isOneWay) object\n\n\tConfigure TP protocol with one-way option\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithTPOneWay(isOneWay))\n</code></pre>"},{"location":"gs.html#src.gs.WithUhfGW","title":"<code>WithUhfGW(comm)</code>","text":"<p>WithUhfGW(str comm) object</p> <p>Configure with specific UhfGW protocol options</p> Source code in <code>src/gs.py</code> <pre><code>def WithUhfGW(comm):\n\t\"\"\"WithUhfGW(str comm) object\n\n\tConfigure with specific UhfGW protocol options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithUhfGW(comm))\n</code></pre>"},{"location":"gs.html#src.gs.WithUhfGWConn","title":"<code>WithUhfGWConn(cmd)</code>","text":"<p>WithUhfGWConn(int cmd) object</p> <p>Configure with specific UhfGW connection options</p> Source code in <code>src/gs.py</code> <pre><code>def WithUhfGWConn(cmd):\n\t\"\"\"WithUhfGWConn(int cmd) object\n\n\tConfigure with specific UhfGW connection options\n\t\"\"\"\n\treturn go.yaml_config_Option(handle=_pygs.gs_WithUhfGWConn(cmd))\n</code></pre>"},{"location":"misc.html","title":"misc","text":""},{"location":"misc.html#src.misc.Msp430UpdateHeader","title":"<code>Msp430UpdateHeader</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>The MSP430 firmware update header</p> Source code in <code>src/misc.py</code> <pre><code>class Msp430UpdateHeader(go.GoClass):\n\t\"\"\"The MSP430 firmware update header\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.misc_Msp430UpdateHeader_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.CRCBlockSize = args[0]\n\t\t\tif \"CRCBlockSize\" in kwargs:\n\t\t\t\tself.CRCBlockSize = kwargs[\"CRCBlockSize\"]\n\t\t\tif  1 &lt; len(args):\n\t\t\t\tself.UpdateSize = args[1]\n\t\t\tif \"UpdateSize\" in kwargs:\n\t\t\t\tself.UpdateSize = kwargs[\"UpdateSize\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'misc.Msp430UpdateHeader{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'misc.Msp430UpdateHeader ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef CRCBlockSize(self):\n\t\treturn _pygs.misc_Msp430UpdateHeader_CRCBlockSize_Get(self.handle)\n\t@CRCBlockSize.setter\n\tdef CRCBlockSize(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.misc_Msp430UpdateHeader_CRCBlockSize_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.misc_Msp430UpdateHeader_CRCBlockSize_Set(self.handle, value)\n\t@property\n\tdef UpdateSize(self):\n\t\treturn _pygs.misc_Msp430UpdateHeader_UpdateSize_Get(self.handle)\n\t@UpdateSize.setter\n\tdef UpdateSize(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.misc_Msp430UpdateHeader_UpdateSize_Set(self.handle, value.handle)\n\t\telse:\n\t\t\t_pygs.misc_Msp430UpdateHeader_UpdateSize_Set(self.handle, value)\n</code></pre>"},{"location":"misc.html#src.misc.Msp430UpdateHeader.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/misc.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.misc_Msp430UpdateHeader_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.CRCBlockSize = args[0]\n\t\tif \"CRCBlockSize\" in kwargs:\n\t\t\tself.CRCBlockSize = kwargs[\"CRCBlockSize\"]\n\t\tif  1 &lt; len(args):\n\t\t\tself.UpdateSize = args[1]\n\t\tif \"UpdateSize\" in kwargs:\n\t\t\tself.UpdateSize = kwargs[\"UpdateSize\"]\n</code></pre>"},{"location":"misc.html#src.misc.FWUpdPrepareBinaryPayload","title":"<code>FWUpdPrepareBinaryPayload(payload, moduleType, subModule, flags, aesKey, aesIV)</code>","text":"<p>FWUpdPrepareBinaryPayload([]int payload, int moduleType, int subModule, long flags, []int aesKey, []int aesIV) []int res, str err</p> <p>Prepares a firmware update for transmission from a firmware update binary. Payload is the firmware update binary. Module type is consts.ModuleTypeId. Sub-module is consts.SubModuleId. Flags is a bitmask of consts.FWUpdFlag.</p> Source code in <code>src/misc.py</code> <pre><code>def FWUpdPrepareBinaryPayload(payload, moduleType, subModule, flags, aesKey, aesIV):\n\t\"\"\"FWUpdPrepareBinaryPayload([]int payload, int moduleType, int subModule, long flags, []int aesKey, []int aesIV) []int res, str err\n\n\tPrepares a firmware update for transmission from a firmware update binary.\n\tPayload is the firmware update binary.\n\tModule type is consts.ModuleTypeId.\n\tSub-module is consts.SubModuleId.\n\tFlags is a bitmask of consts.FWUpdFlag.\n\t\"\"\"\n\treturn go.Slice_byte(handle=_pygs.misc_FWUpdPrepareBinaryPayload(payload.handle, moduleType, subModule, flags, aesKey.handle, aesIV.handle))\n</code></pre>"},{"location":"misc.html#src.misc.FWUpdPrepareBundlePayload","title":"<code>FWUpdPrepareBundlePayload(payload)</code>","text":"<p>FWUpdPrepareBundlePayload([]int payload) []int res</p> <p>Prepares a firmware update for transmission from a firmware update bundle. Strips the file transport header. Payload is the firmware update bundle.</p> Source code in <code>src/misc.py</code> <pre><code>def FWUpdPrepareBundlePayload(payload):\n\t\"\"\"FWUpdPrepareBundlePayload([]int payload) []int res\n\n\tPrepares a firmware update for transmission from a firmware update bundle. Strips the file transport header.\n\tPayload is the firmware update bundle.\n\t\"\"\"\n\treturn go.Slice_byte(handle=_pygs.misc_FWUpdPrepareBundlePayload(payload.handle))\n</code></pre>"},{"location":"misc.html#src.misc.RFChangeAESKey","title":"<code>RFChangeAESKey(aesKey)</code>","text":"<p>RFChangeAESKey([]int aesKey) []int</p> <p>Serializes a special data packet to write to esrfcfg connection for changing the AES key.</p> Source code in <code>src/misc.py</code> <pre><code>def RFChangeAESKey(aesKey):\n\t\"\"\"RFChangeAESKey([]int aesKey) []int\n\n\tSerializes a special data packet to write to esrfcfg connection for changing the AES key.\n\t\"\"\"\n\treturn go.Slice_byte(handle=_pygs.misc_RFChangeAESKey(aesKey.handle))\n</code></pre>"},{"location":"misc.html#src.misc.RFConfigChangeFreq","title":"<code>RFConfigChangeFreq(uplinkFreq, downlinkFreq, rfMode, isIntFrac)</code>","text":"<p>RFConfigChangeFreq(long uplinkFreq, long downlinkFreq, int rfMode, bool isIntFrac) []int</p> <p>Serializes a special data packet to write to esrfcfg connection for changing the radio frequency. isIntFrac specifies if the frequencies should be serialized in the special UHF RF chip format.</p> Source code in <code>src/misc.py</code> <pre><code>def RFConfigChangeFreq(uplinkFreq, downlinkFreq, rfMode, isIntFrac):\n\t\"\"\"RFConfigChangeFreq(long uplinkFreq, long downlinkFreq, int rfMode, bool isIntFrac) []int\n\n\tSerializes a special data packet to write to esrfcfg connection for changing the radio frequency.\n\tisIntFrac specifies if the frequencies should be serialized in the special UHF RF chip format.\n\t\"\"\"\n\treturn go.Slice_byte(handle=_pygs.misc_RFConfigChangeFreq(uplinkFreq, downlinkFreq, rfMode, isIntFrac))\n</code></pre>"},{"location":"misc.html#src.misc.RFConfigChangeRadioMode","title":"<code>RFConfigChangeRadioMode(radioMode)</code>","text":"<p>RFConfigChangeRadioMode(int radioMode) []int</p> <p>Serializes a special data packet to write to esrfcfg connection for changing the radio mode.</p> Source code in <code>src/misc.py</code> <pre><code>def RFConfigChangeRadioMode(radioMode):\n\t\"\"\"RFConfigChangeRadioMode(int radioMode) []int\n\n\tSerializes a special data packet to write to esrfcfg connection for changing the radio mode.\n\t\"\"\"\n\treturn go.Slice_byte(handle=_pygs.misc_RFConfigChangeRadioMode(radioMode))\n</code></pre>"},{"location":"misc.html#src.misc.RFConfigInit","title":"<code>RFConfigInit(uplinkFreq, downlinkFreq, rfMode, radioMode, isIntFrac, encrypted)</code>","text":"<p>RFConfigInit(long uplinkFreq, long downlinkFreq, int rfMode, int radioMode, bool isIntFrac, bool encrypted) []int</p> <p>Serializes a special data packet to write to esrfcfg connection for initializing the radio. isIntFrac specifies if the frequencies should be serialized in the special UHF RF chip format.</p> Source code in <code>src/misc.py</code> <pre><code>def RFConfigInit(uplinkFreq, downlinkFreq, rfMode, radioMode, isIntFrac, encrypted):\n\t\"\"\"RFConfigInit(long uplinkFreq, long downlinkFreq, int rfMode, int radioMode, bool isIntFrac, bool encrypted) []int\n\n\tSerializes a special data packet to write to esrfcfg connection for initializing the radio.\n\tisIntFrac specifies if the frequencies should be serialized in the special UHF RF chip format.\n\t\"\"\"\n\treturn go.Slice_byte(handle=_pygs.misc_RFConfigInit(uplinkFreq, downlinkFreq, rfMode, radioMode, isIntFrac, encrypted))\n</code></pre>"},{"location":"present.html","title":"Protocols multi-address formats","text":""},{"location":"present.html#cp-command","title":"CP command","text":"<p>For sending a CP command</p> <p>/escp</p>"},{"location":"present.html#firmware-update","title":"Firmware update","text":"<p>This protocol is used for multiple purposes, depending on its configuration. Please refer to its ..._config.go files. It can be used to just upload a file. It can be used to start a firmware update if an appropriate file is uploaded. And finally it can be used to check for firmware update status.</p> <p>/esfwupd</p>"},{"location":"present.html#fp-command","title":"FP command","text":"<p>For sending a FP command</p> <p>/esfp</p>"},{"location":"protocol.html","title":"Welcome to the core protocol API of go-comms!","text":"<p>This is the foundation, on top of which all user functionality is build. The API is based on the Go multi-address (MA) and manet API, which is the multi-address implementation of the net API.</p>"},{"location":"protocol.html#whats-in-this-directory","title":"What's in this directory","text":"<p>The protocols are divided in sub-directories according to their level in the protocol stack. All protocols implement the same API, which will be explained here in this document. Each protocol has a multi-address format and additional configurations, which are documented in the sub-directories.</p>"},{"location":"protocol.html#dependencies","title":"Dependencies","text":"<p>The protocol implementations depend mainly on multi-address packages and some other public packages. Internally they only depend on the internal/util, internal/util and pkg/consts packages, so they are really the base of all other packages in the current repo.</p>"},{"location":"protocol.html#api","title":"API","text":"<p>In order to understand how the multi-address API works, please check  github.com/multiformats/go-multiaddr.</p> <p>Using those APIs we implement all the protocols used by Endurosat in this repo as connections. Those packages also include MA implementations of common (and not so common) protocols such as for example TCP/IP.</p> <p>An important aspect of MA is the ability to mix or encapsulate protocols during connection establishment. By mixing different protocols we can dial a satellite module through different communication devices (UHF, Mac dongle) and with different types of payload (CP, FP).</p> <p>The protocol encapsulation is achieved by passing a protocol connection to the factory method of another protocol connection.</p> <p>Furthermore since our protocols implement the MA API and because of the nature of MA. We can encapsulate our protocols with other standard protocols (such TCP/IP) if we choose to.</p> <p>The API is synchronous. Its methods run in a single thread and block the thread execution. All potentially blocking methods do support timeouts in the form of deadlines.</p>"},{"location":"protocol.html#the-multi-address-formats","title":"The multi-address formats","text":"<p>From an API user point of view, each protocol has a specific multi-address format, which contains the protocol code and optional parameters. For instance:</p> <p>/some_proto/param1:param2:param3</p> <p>Please refer to the protocol sub-directories for specific protocol formats. The slash symbol is a delimiter. Here we use : as parameter delimiter, but the symbol is arbitrarily chosen.</p> <p>By itself a protocol usually is not sufficient to establish a connection, so protocols can be encapsulated using a slash delimiter. For example:</p> <p>/proto1/param1:param2/proto2/proto3/param1:param2:param3</p> <p>In theory each protocol can be encapsulated, but it has to reflect the actual hardware setup in order to make a useful communication.</p> <p>For example if we have a Mac dongle, connected to the ground station, we want to use the macgw protocol for the datalink layer. AirMac will not work in this setup. From there on, we start to encapsulate higher level protocols, depending on what data we want to transfer (CP, FWUPD) and how we want to transfer it (TP).</p> <p>Encapsulating protocols, effectively, results in encapsulating the protocol frames. When we feed the data to an established connection using write for example, the data is encapsulated in the highest level protocol frame, then the resulting frame is passed to the lower level protocols and on each step the data will be encapsulated further in the lower level protocol frames and potentially split up in multiple frames.</p>"},{"location":"protocol.html#protocol-initialization","title":"Protocol initialization","text":"<p>The protocols are instantiated and initialized using factory methods. The initialization parameters are supplied to the factory method multi-address and its config object. The factories are registered in the util package, so that they can be accessed by their names from other packages, such as from net.</p> <p>The multi-address parameters are host oriented. What we mean by this is that when dialing a host we use certain parameters, which will be different when the host dials us. One such parameter is the mac address - the two connected hosts have different mac addresses.</p> <p>But in order to initialize a protocol, we usually need more parameters. On protocol level API we expose a config API. On protocol level this API does not have a default implementation and the user is free to implement this fairly simple API. It works by providing a value of type util.ConfigUnmarshaler to the protocol factory method. This value has a single method UnmarshalConfig, which returns a config structure as interface{}, which config structures are protocol specific. An implementation of ConfigUnmarshaler would first accept a config structure and then un-marshal it through the config API. All this exercise is done so that the protocol factory method can accept different and multiple config structures.</p> <p>We try to keep the initialization process simple an have as less config structures as possible per protocol, while try to organize the config options a bit. As a result a protocol has up to 2 config structures. One is more \"permanent\" and is assumed to not change during code execution - ...Config{}. The second one is assumed to change on every new connection - ...ConnConfig{}. This convention however is very subjective and the user is not limited to it. All these structures have constructor functions - With...()</p>"},{"location":"protocol.html#how-to-continue","title":"How to continue","text":"<p>Please refer to the protocol sub-directories.</p> <p>Each directory contains a README.md with the protocols specifics, e.g. its multi-address format.</p> <p>A protocol has ..._config.go files, which contain the protocol config structures.</p> <p>A protocol has a ..._frame.go or ..._packet.go file, which defines the protocol private frame/packet definition not exposed in the API, but still useful for reference.</p> <p>The ..._conn.go file is where the manet API Read, Write functions as well as connection constructors are implemented.</p>"},{"location":"pygs.html","title":"pygs","text":""},{"location":"pygs.html#src.pygs.PyDataNotify","title":"<code>PyDataNotify</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Python notify callback function with data.</p> Source code in <code>src/pygs.py</code> <pre><code>class PyDataNotify(go.GoClass):\n\t\"\"\"Python notify callback function with data.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.pygs_PyDataNotify_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.Data = args[0]\n\t\t\tif \"Data\" in kwargs:\n\t\t\t\tself.Data = kwargs[\"Data\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'pygs.PyDataNotify{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'pygs.PyDataNotify ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef Data(self):\n\t\treturn gs.DataResult(handle=_pygs.pygs_PyDataNotify_Data_Get(self.handle))\n\t@Data.setter\n\tdef Data(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.pygs_PyDataNotify_Data_Set(self.handle, value.handle)\n\t\telse:\n\t\t\traise TypeError(\"supplied argument type {t} is not a go.GoClass\".format(t=type(value)))\n\tdef CallBack(self, fun, goRun=False):\n\t\t\"\"\"CallBack(callable fun) \n\n\t\tSet the callback function with data.\n\t\t\"\"\"\n\t\t_pygs.pygs_PyDataNotify_CallBack(self.handle, fun, goRun)\n</code></pre>"},{"location":"pygs.html#src.pygs.PyDataNotify.CallBack","title":"<code>CallBack(fun, goRun=False)</code>","text":"<p>CallBack(callable fun) </p> <p>Set the callback function with data.</p> Source code in <code>src/pygs.py</code> <pre><code>def CallBack(self, fun, goRun=False):\n\t\"\"\"CallBack(callable fun) \n\n\tSet the callback function with data.\n\t\"\"\"\n\t_pygs.pygs_PyDataNotify_CallBack(self.handle, fun, goRun)\n</code></pre>"},{"location":"pygs.html#src.pygs.PyDataNotify.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/pygs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.pygs_PyDataNotify_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.Data = args[0]\n\t\tif \"Data\" in kwargs:\n\t\t\tself.Data = kwargs[\"Data\"]\n</code></pre>"},{"location":"pygs.html#src.pygs.PyFrameNotify","title":"<code>PyFrameNotify</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Python notify callback function with frame data.</p> Source code in <code>src/pygs.py</code> <pre><code>class PyFrameNotify(go.GoClass):\n\t\"\"\"Python notify callback function with frame data.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.pygs_PyFrameNotify_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\t\t\tif  0 &lt; len(args):\n\t\t\t\tself.Frame = args[0]\n\t\t\tif \"Frame\" in kwargs:\n\t\t\t\tself.Frame = kwargs[\"Frame\"]\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'pygs.PyFrameNotify{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'pygs.PyFrameNotify ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\t@property\n\tdef Frame(self):\n\t\treturn gs.FrameResult(handle=_pygs.pygs_PyFrameNotify_Frame_Get(self.handle))\n\t@Frame.setter\n\tdef Frame(self, value):\n\t\tif isinstance(value, go.GoClass):\n\t\t\t_pygs.pygs_PyFrameNotify_Frame_Set(self.handle, value.handle)\n\t\telse:\n\t\t\traise TypeError(\"supplied argument type {t} is not a go.GoClass\".format(t=type(value)))\n\tdef CallBack(self, fun, goRun=False):\n\t\t\"\"\"CallBack(callable fun) \n\n\t\tSet the callback function with frame data.\n\t\t\"\"\"\n\t\t_pygs.pygs_PyFrameNotify_CallBack(self.handle, fun, goRun)\n</code></pre>"},{"location":"pygs.html#src.pygs.PyFrameNotify.CallBack","title":"<code>CallBack(fun, goRun=False)</code>","text":"<p>CallBack(callable fun) </p> <p>Set the callback function with frame data.</p> Source code in <code>src/pygs.py</code> <pre><code>def CallBack(self, fun, goRun=False):\n\t\"\"\"CallBack(callable fun) \n\n\tSet the callback function with frame data.\n\t\"\"\"\n\t_pygs.pygs_PyFrameNotify_CallBack(self.handle, fun, goRun)\n</code></pre>"},{"location":"pygs.html#src.pygs.PyFrameNotify.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/pygs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.pygs_PyFrameNotify_CTor()\n\t\t_pygs.IncRef(self.handle)\n\t\tif  0 &lt; len(args):\n\t\t\tself.Frame = args[0]\n\t\tif \"Frame\" in kwargs:\n\t\t\tself.Frame = kwargs[\"Frame\"]\n</code></pre>"},{"location":"pygs.html#src.pygs.PyNotify","title":"<code>PyNotify</code>","text":"<p>             Bases: <code>GoClass</code></p> <p>Python notify callback function.</p> Source code in <code>src/pygs.py</code> <pre><code>class PyNotify(go.GoClass):\n\t\"\"\"Python notify callback function.\\n\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\thandle=A Go-side object is always initialized with an explicit handle=arg\n\t\totherwise parameters can be unnamed in order of field names or named fields\n\t\tin which case a new Go object is constructed first\n\t\t\"\"\"\n\t\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\t\tself.handle = kwargs['handle']\n\t\t\t_pygs.IncRef(self.handle)\n\t\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\t\tself.handle = args[0].handle\n\t\t\t_pygs.IncRef(self.handle)\n\t\telse:\n\t\t\tself.handle = _pygs.pygs_PyNotify_CTor()\n\t\t\t_pygs.IncRef(self.handle)\n\tdef __del__(self):\n\t\t_pygs.DecRef(self.handle)\n\tdef __str__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'pygs.PyNotify{'\n\t\tfirst = True\n\t\tfor v in pr:\n\t\t\tif callable(v[1]):\n\t\t\t\tcontinue\n\t\t\tif first:\n\t\t\t\tfirst = False\n\t\t\telse:\n\t\t\t\tsv += ', '\n\t\t\tsv += v[0] + '=' + str(v[1])\n\t\treturn sv + '}'\n\tdef __repr__(self):\n\t\tpr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]\n\t\tsv = 'pygs.PyNotify ( '\n\t\tfor v in pr:\n\t\t\tif not callable(v[1]):\n\t\t\t\tsv += v[0] + '=' + str(v[1]) + ', '\n\t\treturn sv + ')'\n\tdef CallBack(self, fun, goRun=False):\n\t\t\"\"\"CallBack(callable fun) \n\n\t\tSet the callback function.\n\t\t\"\"\"\n\t\t_pygs.pygs_PyNotify_CallBack(self.handle, fun, goRun)\n</code></pre>"},{"location":"pygs.html#src.pygs.PyNotify.CallBack","title":"<code>CallBack(fun, goRun=False)</code>","text":"<p>CallBack(callable fun) </p> <p>Set the callback function.</p> Source code in <code>src/pygs.py</code> <pre><code>def CallBack(self, fun, goRun=False):\n\t\"\"\"CallBack(callable fun) \n\n\tSet the callback function.\n\t\"\"\"\n\t_pygs.pygs_PyNotify_CallBack(self.handle, fun, goRun)\n</code></pre>"},{"location":"pygs.html#src.pygs.PyNotify.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>handle=A Go-side object is always initialized with an explicit handle=arg otherwise parameters can be unnamed in order of field names or named fields in which case a new Go object is constructed first</p> Source code in <code>src/pygs.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\t\"\"\"\n\thandle=A Go-side object is always initialized with an explicit handle=arg\n\totherwise parameters can be unnamed in order of field names or named fields\n\tin which case a new Go object is constructed first\n\t\"\"\"\n\tif len(kwargs) == 1 and 'handle' in kwargs:\n\t\tself.handle = kwargs['handle']\n\t\t_pygs.IncRef(self.handle)\n\telif len(args) == 1 and isinstance(args[0], go.GoClass):\n\t\tself.handle = args[0].handle\n\t\t_pygs.IncRef(self.handle)\n\telse:\n\t\tself.handle = _pygs.pygs_PyNotify_CTor()\n\t\t_pygs.IncRef(self.handle)\n</code></pre>"},{"location":"pygs.html#src.pygs.PyToGsDataNotify","title":"<code>PyToGsDataNotify(pyNotify)</code>","text":"<p>PyToGsDataNotify(object pyNotify) object</p> <p>Convert Python notify callback function with data to GS notify callback function with data.</p> Source code in <code>src/pygs.py</code> <pre><code>def PyToGsDataNotify(pyNotify):\n\t\"\"\"PyToGsDataNotify(object pyNotify) object\n\n\tConvert Python notify callback function with data to GS notify callback function with data.\n\t\"\"\"\n\treturn gs.DataNotify(handle=_pygs.pygs_PyToGsDataNotify(pyNotify.handle))\n</code></pre>"},{"location":"pygs.html#src.pygs.PyToGsFrameNotify","title":"<code>PyToGsFrameNotify(pyNotify)</code>","text":"<p>PyToGsFrameNotify(object pyNotify) object</p> <p>Convert Python notify callback function with frame data to GS notify callback function with frame data.</p> Source code in <code>src/pygs.py</code> <pre><code>def PyToGsFrameNotify(pyNotify):\n\t\"\"\"PyToGsFrameNotify(object pyNotify) object\n\n\tConvert Python notify callback function with frame data to GS notify callback function with frame data.\n\t\"\"\"\n\treturn gs.FrameNotify(handle=_pygs.pygs_PyToGsFrameNotify(pyNotify.handle))\n</code></pre>"},{"location":"pygs.html#src.pygs.PyToGsNotify","title":"<code>PyToGsNotify(pyNotify)</code>","text":"<p>PyToGsNotify(object pyNotify) object</p> <p>Convert Python notify callback function to GS notify callback function.</p> Source code in <code>src/pygs.py</code> <pre><code>def PyToGsNotify(pyNotify):\n\t\"\"\"PyToGsNotify(object pyNotify) object\n\n\tConvert Python notify callback function to GS notify callback function.\n\t\"\"\"\n\treturn gs.Notify(handle=_pygs.pygs_PyToGsNotify(pyNotify.handle))\n</code></pre>"},{"location":"pygs.html#src.pygs.Verbose","title":"<code>Verbose(enable, goRun=False)</code>","text":"<p>Verbose(bool enable) </p> <p>Enable verbose logging</p> Source code in <code>src/pygs.py</code> <pre><code>def Verbose(enable, goRun=False):\n\t\"\"\"Verbose(bool enable) \n\n\tEnable verbose logging\n\t\"\"\"\n\t_pygs.pygs_Verbose(enable, goRun)\n</code></pre>"},{"location":"transport.html","title":"Protocols multi-address formats","text":""},{"location":"transport.html#transport-protocol-tp","title":"Transport protocol (TP)","text":"<p>This protocol can transmit safely datagrams up to about 4GB. It is usually used for sending data, which is longer than 1 datalink frame. Additionally TP has this inconvenience to have configuration dependencies with other protocols, e.g. CP cmdId and TP hostContext need to be the same. Same goes for datalink protocols - TP has module mac/satellite id which must match with MacGW mac address or AirMac satellite id.</p> <p>/estp/&lt;system_type&gt;:&lt;system_addr&gt;:&lt;module_mac&gt;</p> <p>where &lt;system_type&gt; is 2 - satellite, 1 - ground station; &lt;system_addr&gt; is either satellite or ground station id; &lt;module_mac&gt; is the target module mac address.</p>"}]}